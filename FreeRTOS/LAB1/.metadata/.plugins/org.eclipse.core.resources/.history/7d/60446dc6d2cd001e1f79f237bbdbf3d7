/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "stm32f103c8.h"
#include "stm32f103c8_rcc_driver.h"
#include "stm32f103c8_gpio_driver.h"
#include "stm32f103c8_exti_driver.h"

#include "core_cm3.h"

#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"


uint8_t Flag = 0;

/* Task Handle */
TaskHandle_t vBlinkLedHandle = NULL;

/* Task Prototype */
void vBlinkLed(void *param);


//static vuint32_t g_TickCounter = 0;
//
//
//void SysTick_Handler(void)
//{
//	++g_TickCounter;
//}
//
//static void delay_ms(uint32_t delay)
//{
//	uint32_t currentCounter = g_TickCounter;
//	while((g_TickCounter - currentCounter) < delay);
//}

void systemInit(void)
{
	//	SysTick_Config((uint32_t)8000);/* For The Delay Function */

	MCAL_RCC_initSYSClk();

	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOB_ID);

	GPIO_PinConfig_t config;

	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
	config.GPIO_PinNumber = GPIO_PIN12;
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &config);
}


void vBlinkLed(void *param)
{
	while(1)
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN12, LOGIC_HIGH);
		vTaskDelay(500);
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN12, LOGIC_LOW);
		vTaskDelay(500);

		if(Flag == 5)
		{
			vTaskDelay(5000);
			Flag = 0;
		}
	}
}

int main(void)
{
	systemInit();

	xTaskCreate(vBlinkLed, "BlinkLed", 128, NULL, 1, vBlinkLedHandle);

	vTaskStartScheduler();

	/* Loop forever */
	while(1);
}
