
Blue_Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002078  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021a8  080021a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021c0  080021c0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080021c0  080021c0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021c0  080021c0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080021c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002188  20000008  080021d0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002190  080021d0  00022190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000889b  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001354  00000000  00000000  000288cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000025a8  00000000  00000000  00029c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004e0  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000448  00000000  00000000  0002c6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000030ba  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000046af  00000000  00000000  0002fbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00019a92  00000000  00000000  00034259  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004dceb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001268  00000000  00000000  0004dd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08002190 	.word	0x08002190

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08002190 	.word	0x08002190

08000170 <EXTI0_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[0])();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20002154 	.word	0x20002154

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[1])();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20002154 	.word	0x20002154

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[2])();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20002154 	.word	0x20002154

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[3])();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20002154 	.word	0x20002154

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[4])();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20002154 	.word	0x20002154

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI5))
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <EXTI9_5_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI5);
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a24      	ldr	r2, [pc, #144]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[5])();
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI9);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[9])();
	}
}
 8000246:	e03e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI6))
 8000248:	4b20      	ldr	r3, [pc, #128]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000250:	2b00      	cmp	r3, #0
 8000252:	d009      	beq.n	8000268 <EXTI9_5_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI6);
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800025a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[6])();
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4798      	blx	r3
}
 8000266:	e02e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI7))
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <EXTI9_5_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI7);
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[7])();
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000282:	69db      	ldr	r3, [r3, #28]
 8000284:	4798      	blx	r3
}
 8000286:	e01e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI8))
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000290:	2b00      	cmp	r3, #0
 8000292:	d009      	beq.n	80002a8 <EXTI9_5_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI8);
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[8])();
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4798      	blx	r3
}
 80002a6:	e00e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI9))
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d008      	beq.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
		SET_BIT(EXTI->PR,EXTI9);
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[9])();
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c4:	4798      	blx	r3
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400
 80002d0:	20002154 	.word	0x20002154

080002d4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI10))
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d009      	beq.n	80002f8 <EXTI15_10_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI10);
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[10])();
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 80002f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f4:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI15);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[15])();
	}
}
 80002f6:	e04e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI11))
 80002f8:	4b28      	ldr	r3, [pc, #160]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000300:	2b00      	cmp	r3, #0
 8000302:	d009      	beq.n	8000318 <EXTI15_10_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI11);
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800030a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800030e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[11])();
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000314:	4798      	blx	r3
}
 8000316:	e03e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI12))
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000320:	2b00      	cmp	r3, #0
 8000322:	d009      	beq.n	8000338 <EXTI15_10_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI12);
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800032a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[12])();
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4798      	blx	r3
}
 8000336:	e02e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI13))
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d009      	beq.n	8000358 <EXTI15_10_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI13);
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[13])();
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	4798      	blx	r3
}
 8000356:	e01e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI14))
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d009      	beq.n	8000378 <EXTI15_10_IRQHandler+0xa4>
		SET_BIT(EXTI->PR,EXTI14);
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[14])();
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000374:	4798      	blx	r3
}
 8000376:	e00e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI15))
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <EXTI15_10_IRQHandler+0xc2>
		SET_BIT(EXTI->PR,EXTI15);
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800038a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800038e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[15])();
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000394:	4798      	blx	r3
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010400 	.word	0x40010400
 80003a0:	20002154 	.word	0x20002154

080003a4 <MCAL_GPIO_Init>:
 * Parameter (in) : GPIOx x Could Be A,B,C,D and E.
 * Parameter (in) : a_PinConfig is Pointer to GPIO_PinConfig_t that Contain Configuration of Pin.
 * Return         : None.
 * Note           : That in LQFP48 GPIOA and GPIOB are fully included, GPIOC and GPIOD Partially Included, GPIOE Not Included*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* p_PinConfig)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	vuint32_t* CRHL = NULL_PTR;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
	uint8_t tempPinConfig = 0; /* Temporary Variable to Assign CRHL by (MODE + CNF) Bits */
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]

	/* Specifies Which Configuration Register Will Be Used (CRL 0>>>7) Or (CRH 8>>>15) */
	CRHL = ((p_PinConfig->GPIO_PinNumber) < GPIO_PIN8)?(&GPIOx->CRL):(&GPIOx->CRH);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	d801      	bhi.n	80003c2 <MCAL_GPIO_Init+0x1e>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	e001      	b.n	80003c6 <MCAL_GPIO_Init+0x22>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3304      	adds	r3, #4
 80003c6:	60bb      	str	r3, [r7, #8]

	/* Clear Default Value */
	(*CRHL) &= (~((0xF) << GET_PIN_POSITION(p_PinConfig->GPIO_PinNumber)));
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f894 	bl	80004fa <GET_PIN_POSITION>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	230f      	movs	r3, #15
 80003d8:	4093      	lsls	r3, r2
 80003da:	43da      	mvns	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	401a      	ands	r2, r3
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	601a      	str	r2, [r3, #0]

	/* If The Pin Is OUTPUT */
	if((p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PUSHPULL) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OPENDRAIN) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PUSHPULL) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OPENDRAIN))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d00b      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d007      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	789b      	ldrb	r3, [r3, #2]
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d003      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	2b07      	cmp	r3, #7
 8000404:	d10e      	bne.n	8000424 <MCAL_GPIO_Init+0x80>
	{
		/*Macros of OUTPUT MODE Assigned With Values To be Manipulated to get The Values that Set CNFy[1:0] MODEy[1:0] */
		tempPinConfig = ( ( (((p_PinConfig->GPIO_Mode) - 4) << 2) | (p_PinConfig->GPIO_Output_Speed) ) & 0x0F );
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	789b      	ldrb	r3, [r3, #2]
 800040a:	3b04      	subs	r3, #4
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	b25a      	sxtb	r2, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	78db      	ldrb	r3, [r3, #3]
 8000414:	b25b      	sxtb	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b25b      	sxtb	r3, r3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	f003 030f 	and.w	r3, r3, #15
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e027      	b.n	8000474 <MCAL_GPIO_Init+0xd0>
	}
	else /* Else The Pin Is INPUT */
	{
		if((p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLOATING) || (p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF_FLOATING))
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d003      	beq.n	8000434 <MCAL_GPIO_Init+0x90>
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	789b      	ldrb	r3, [r3, #2]
 8000430:	2b08      	cmp	r3, #8
 8000432:	d102      	bne.n	800043a <MCAL_GPIO_Init+0x96>
		{
			/* CNFy[1:0] = 01: Floating input */
			tempPinConfig = ( (((GPIO_MODE_INPUT_FLOATING) <<2) | 0x0 ) & 0x0F );
 8000434:	2304      	movs	r3, #4
 8000436:	73fb      	strb	r3, [r7, #15]
 8000438:	e01c      	b.n	8000474 <MCAL_GPIO_Init+0xd0>

		}else if((p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_ANALOG))
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	789b      	ldrb	r3, [r3, #2]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d102      	bne.n	8000448 <MCAL_GPIO_Init+0xa4>
		{
			/* CNFy[1:0] = 00: Analog mode */
			tempPinConfig = ( (((GPIO_MODE_INPUT_ANALOG) <<2) | 0x0 ) & 0x0F );
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
 8000446:	e015      	b.n	8000474 <MCAL_GPIO_Init+0xd0>

		}else
		{
			/* CNFy[1:0] = 10: Input with pull-up / pull-down */
			tempPinConfig = ( (((GPIO_MODE_INPUT_PULLUP) <<2) | 0x0 ) & 0x0F );
 8000448:	2308      	movs	r3, #8
 800044a:	73fb      	strb	r3, [r7, #15]

			/*For PULLUP set xODR bit 1 , PULLDOWN set xODR bit 0 */
			if(p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PULLDOWN)
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	789b      	ldrb	r3, [r3, #2]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d108      	bne.n	8000466 <MCAL_GPIO_Init+0xc2>
			{
				(GPIOx->ODR) &= ~(p_PinConfig->GPIO_PinNumber);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	8812      	ldrh	r2, [r2, #0]
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	e006      	b.n	8000474 <MCAL_GPIO_Init+0xd0>
			}else
			{
				(GPIOx->ODR) |= (p_PinConfig->GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	8812      	ldrh	r2, [r2, #0]
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	60da      	str	r2, [r3, #12]
			}
		}
	}

	/* Assign the CRH or CRL With Pin Configuration */
	(*CRHL) |= ( (tempPinConfig) << (GET_PIN_POSITION(p_PinConfig->GPIO_PinNumber)));
 8000474:	7bfc      	ldrb	r4, [r7, #15]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f83d 	bl	80004fa <GET_PIN_POSITION>
 8000480:	4603      	mov	r3, r0
 8000482:	fa04 f203 	lsl.w	r2, r4, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	601a      	str	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bd90      	pop	{r4, r7, pc}

08000498 <MCAL_GPIO_ReadPin>:

}


PinState MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t a_PinNumber)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	807b      	strh	r3, [r7, #2]
	PinState pinValue;

	if(((GPIOx->IDR) & a_PinNumber) != LOGIC_LOW)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	4013      	ands	r3, r2
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d002      	beq.n	80004b6 <MCAL_GPIO_ReadPin+0x1e>
		pinValue = LOGIC_HIGH;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e001      	b.n	80004ba <MCAL_GPIO_ReadPin+0x22>
	else
		pinValue = LOGIC_LOW;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]

	return pinValue;
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <MCAL_GPIO_WritePin>:


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t a_PinNumber, PinState a_Logic)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
 80004ce:	460b      	mov	r3, r1
 80004d0:	807b      	strh	r3, [r7, #2]
 80004d2:	4613      	mov	r3, r2
 80004d4:	707b      	strb	r3, [r7, #1]

	if(LOGIC_HIGH == a_Logic)
 80004d6:	787b      	ldrb	r3, [r7, #1]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d103      	bne.n	80004e4 <MCAL_GPIO_WritePin+0x1e>
		(GPIOx->BSRRL) = (uint32_t)a_PinNumber;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	887a      	ldrh	r2, [r7, #2]
 80004e0:	821a      	strh	r2, [r3, #16]
	else if(LOGIC_LOW == a_Logic)
		(GPIOx->BRR) = (uint32_t)a_PinNumber;
}
 80004e2:	e005      	b.n	80004f0 <MCAL_GPIO_WritePin+0x2a>
	else if(LOGIC_LOW == a_Logic)
 80004e4:	787b      	ldrb	r3, [r7, #1]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d102      	bne.n	80004f0 <MCAL_GPIO_WritePin+0x2a>
		(GPIOx->BRR) = (uint32_t)a_PinNumber;
 80004ea:	887a      	ldrh	r2, [r7, #2]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	615a      	str	r2, [r3, #20]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <GET_PIN_POSITION>:
/*===============================================================================
 *                        Private Function Definitions                           *
 ================================================================================*/

static uint16_t GET_PIN_POSITION(uint16_t a_PinNumber)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	80fb      	strh	r3, [r7, #6]
	switch(a_PinNumber)
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	2b80      	cmp	r3, #128	; 0x80
 8000508:	d042      	beq.n	8000590 <GET_PIN_POSITION+0x96>
 800050a:	2b80      	cmp	r3, #128	; 0x80
 800050c:	dc11      	bgt.n	8000532 <GET_PIN_POSITION+0x38>
 800050e:	2b08      	cmp	r3, #8
 8000510:	d036      	beq.n	8000580 <GET_PIN_POSITION+0x86>
 8000512:	2b08      	cmp	r3, #8
 8000514:	dc06      	bgt.n	8000524 <GET_PIN_POSITION+0x2a>
 8000516:	2b02      	cmp	r3, #2
 8000518:	d02e      	beq.n	8000578 <GET_PIN_POSITION+0x7e>
 800051a:	2b04      	cmp	r3, #4
 800051c:	d02e      	beq.n	800057c <GET_PIN_POSITION+0x82>
 800051e:	2b01      	cmp	r3, #1
 8000520:	d028      	beq.n	8000574 <GET_PIN_POSITION+0x7a>
	case GPIO_PIN7:
	case GPIO_PIN15:
		return 28;
		break;
	default:
		break;
 8000522:	e037      	b.n	8000594 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000524:	2b20      	cmp	r3, #32
 8000526:	d02f      	beq.n	8000588 <GET_PIN_POSITION+0x8e>
 8000528:	2b40      	cmp	r3, #64	; 0x40
 800052a:	d02f      	beq.n	800058c <GET_PIN_POSITION+0x92>
 800052c:	2b10      	cmp	r3, #16
 800052e:	d029      	beq.n	8000584 <GET_PIN_POSITION+0x8a>
		break;
 8000530:	e030      	b.n	8000594 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000536:	d023      	beq.n	8000580 <GET_PIN_POSITION+0x86>
 8000538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800053c:	dc09      	bgt.n	8000552 <GET_PIN_POSITION+0x58>
 800053e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000542:	d019      	beq.n	8000578 <GET_PIN_POSITION+0x7e>
 8000544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000548:	d018      	beq.n	800057c <GET_PIN_POSITION+0x82>
 800054a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800054e:	d011      	beq.n	8000574 <GET_PIN_POSITION+0x7a>
		break;
 8000550:	e020      	b.n	8000594 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000556:	d017      	beq.n	8000588 <GET_PIN_POSITION+0x8e>
 8000558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055c:	dc03      	bgt.n	8000566 <GET_PIN_POSITION+0x6c>
 800055e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000562:	d00f      	beq.n	8000584 <GET_PIN_POSITION+0x8a>
		break;
 8000564:	e016      	b.n	8000594 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800056a:	d00f      	beq.n	800058c <GET_PIN_POSITION+0x92>
 800056c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000570:	d00e      	beq.n	8000590 <GET_PIN_POSITION+0x96>
		break;
 8000572:	e00f      	b.n	8000594 <GET_PIN_POSITION+0x9a>
		return 0;
 8000574:	2300      	movs	r3, #0
 8000576:	e00e      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 4;
 8000578:	2304      	movs	r3, #4
 800057a:	e00c      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 8;
 800057c:	2308      	movs	r3, #8
 800057e:	e00a      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 12;
 8000580:	230c      	movs	r3, #12
 8000582:	e008      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 16;
 8000584:	2310      	movs	r3, #16
 8000586:	e006      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 20;
 8000588:	2314      	movs	r3, #20
 800058a:	e004      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 24;
 800058c:	2318      	movs	r3, #24
 800058e:	e002      	b.n	8000596 <GET_PIN_POSITION+0x9c>
		return 28;
 8000590:	231c      	movs	r3, #28
 8000592:	e000      	b.n	8000596 <GET_PIN_POSITION+0x9c>
	}
	return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <MCAL_RCC_initSYSClk>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void MCAL_RCC_initSYSClk(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	/* Clear Default Value For Control Register */
	CLEAR_BIT((RCC->CR),0);
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005aa:	f023 0301 	bic.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]

	/* System Clock Switch*/
	RCC->CFGR |= SYS_CLK_SRC;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005b2:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	6053      	str	r3, [r2, #4]

	/* AHB Prescaler */
	(RCC->CFGR) |= AHB_CLK_PRESCALER;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	6053      	str	r3, [r2, #4]

	/* APB1 Prescaler */
	(RCC->CFGR) |= (APB_LOW_CLK_PRESCALER<<8);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	6053      	str	r3, [r2, #4]

	/* APB2 Prescaler */
	(RCC->CFGR) |= (APB_HIGH_CLK_PRESCALER<<11);
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	6053      	str	r3, [r2, #4]

#if SYS_CLK_SRC == RCC_HSI_CLK

	/* Internal High-Speed Clock Enable */
	SET_BIT((RCC->CR),0);
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <MCAL_RCC_initSYSClk+0x44>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	6013      	str	r3, [r2, #0]

#error("Your SYSCLK Is False")

#endif

}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <MCAL_RCC_enableCLK>:

void MCAL_RCC_enableCLK(uint8_t a_BusID, uint8_t a_PeriphID)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
	switch (a_BusID) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00f      	beq.n	800061e <MCAL_RCC_enableCLK+0x36>
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d018      	beq.n	8000634 <MCAL_RCC_enableCLK+0x4c>
 8000602:	2b00      	cmp	r3, #0
 8000604:	d000      	beq.n	8000608 <MCAL_RCC_enableCLK+0x20>
		break;
	case RCC_APB2_BUS:
		SET_BIT((RCC->APB2ENR),(a_PeriphID));
		break;
	default:
		break;
 8000606:	e020      	b.n	800064a <MCAL_RCC_enableCLK+0x62>
		SET_BIT((RCC->AHBENR),(a_PeriphID));
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MCAL_RCC_enableCLK+0x6c>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <MCAL_RCC_enableCLK+0x6c>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6153      	str	r3, [r2, #20]
		break;
 800061c:	e015      	b.n	800064a <MCAL_RCC_enableCLK+0x62>
		SET_BIT((RCC->APB1ENR),(a_PeriphID));
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MCAL_RCC_enableCLK+0x6c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	79ba      	ldrb	r2, [r7, #6]
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	4611      	mov	r1, r2
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <MCAL_RCC_enableCLK+0x6c>)
 800062e:	430b      	orrs	r3, r1
 8000630:	61d3      	str	r3, [r2, #28]
		break;
 8000632:	e00a      	b.n	800064a <MCAL_RCC_enableCLK+0x62>
		SET_BIT((RCC->APB2ENR),(a_PeriphID));
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MCAL_RCC_enableCLK+0x6c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	2101      	movs	r1, #1
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	4611      	mov	r1, r2
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <MCAL_RCC_enableCLK+0x6c>)
 8000644:	430b      	orrs	r3, r1
 8000646:	6193      	str	r3, [r2, #24]
		break;
 8000648:	bf00      	nop
	}
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000

08000658 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f103 0208 	add.w	r2, r3, #8
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f04f 32ff 	mov.w	r2, #4294967295
 8000670:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f103 0208 	add.w	r2, r3, #8
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f103 0208 	add.w	r2, r3, #8
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006ae:	b480      	push	{r7}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c4:	d103      	bne.n	80006ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e00c      	b.n	80006e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3308      	adds	r3, #8
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e002      	b.n	80006dc <vListInsert+0x2e>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d2f6      	bcs.n	80006d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	6892      	ldr	r2, [r2, #8]
 8000734:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	6852      	ldr	r2, [r2, #4]
 800073e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d103      	bne.n	8000752 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800077a:	2301      	movs	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d063      	beq.n	8000850 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800078c:	2b00      	cmp	r3, #0
 800078e:	d05f      	beq.n	8000850 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000798:	2000      	movs	r0, #0
 800079a:	fba2 1203 	umull	r1, r2, r2, r3
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	f04f 0400 	mov.w	r4, #0
 80007a6:	0013      	movs	r3, r2
 80007a8:	2400      	movs	r4, #0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <xQueueGenericReset+0x40>
 80007ae:	2001      	movs	r0, #1
 80007b0:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14c      	bne.n	8000850 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80007b6:	f001 f9c1 	bl	8001b3c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007c6:	fb01 f303 	mul.w	r3, r1, r3
 80007ca:	441a      	add	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e6:	3b01      	subs	r3, #1
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	441a      	add	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	22ff      	movs	r2, #255	; 0xff
 80007fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d114      	bne.n	8000836 <xQueueGenericReset+0xc6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d01a      	beq.n	800084a <xQueueGenericReset+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3310      	adds	r3, #16
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fea3 	bl	8001564 <xTaskRemoveFromEventList>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d012      	beq.n	800084a <xQueueGenericReset+0xda>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <xQueueGenericReset+0xf0>)
 8000826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	f3bf 8f6f 	isb	sy
 8000834:	e009      	b.n	800084a <xQueueGenericReset+0xda>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3310      	adds	r3, #16
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff0c 	bl	8000658 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3324      	adds	r3, #36	; 0x24
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff07 	bl	8000658 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800084a:	f001 f98f 	bl	8001b6c <vPortExitCritical>
 800084e:	e001      	b.n	8000854 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000854:	68fb      	ldr	r3, [r7, #12]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	bf00      	nop
 8000860:	e000ed04 	.word	0xe000ed04

08000864 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af02      	add	r7, sp, #8
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	4613      	mov	r3, r2
 8000870:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d033      	beq.n	80008e4 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800087c:	2000      	movs	r0, #0
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	fba2 1203 	umull	r1, r2, r2, r3
 8000886:	f04f 0300 	mov.w	r3, #0
 800088a:	f04f 0400 	mov.w	r4, #0
 800088e:	0013      	movs	r3, r2
 8000890:	2400      	movs	r4, #0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d000      	beq.n	8000898 <xQueueGenericCreate+0x34>
 8000896:	2001      	movs	r0, #1
 8000898:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800089a:	2b00      	cmp	r3, #0
 800089c:	d122      	bne.n	80008e4 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008a6:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80008aa:	d81b      	bhi.n	80008e4 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	3348      	adds	r3, #72	; 0x48
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 f9ce 	bl	8001c5c <pvPortMalloc>
 80008c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00d      	beq.n	80008e4 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3348      	adds	r3, #72	; 0x48
 80008d0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	4613      	mov	r3, r2
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f000 f805 	bl	80008ee <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80008e4:	69fb      	ldr	r3, [r7, #28]
    }
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}

080008ee <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b084      	sub	sp, #16
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d103      	bne.n	800090a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e002      	b.n	8000910 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800091c:	2101      	movs	r1, #1
 800091e:	69b8      	ldr	r0, [r7, #24]
 8000920:	f7ff ff26 	bl	8000770 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000942:	f001 f8fb 	bl	8001b3c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094e:	429a      	cmp	r2, r3
 8000950:	d302      	bcc.n	8000958 <xQueueGenericSend+0x2c>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d129      	bne.n	80009ac <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	6a38      	ldr	r0, [r7, #32]
 800095e:	f000 f92d 	bl	8000bbc <prvCopyDataToQueue>
 8000962:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000968:	2b00      	cmp	r3, #0
 800096a:	d010      	beq.n	800098e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	3324      	adds	r3, #36	; 0x24
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fdf7 	bl	8001564 <xTaskRemoveFromEventList>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d013      	beq.n	80009a4 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800097c:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <xQueueGenericSend+0x150>)
 800097e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	f3bf 8f4f 	dsb	sy
 8000988:	f3bf 8f6f 	isb	sy
 800098c:	e00a      	b.n	80009a4 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d007      	beq.n	80009a4 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000994:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <xQueueGenericSend+0x150>)
 8000996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	f3bf 8f4f 	dsb	sy
 80009a0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009a4:	f001 f8e2 	bl	8001b6c <vPortExitCritical>
                return pdPASS;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e063      	b.n	8000a74 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d103      	bne.n	80009ba <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009b2:	f001 f8db 	bl	8001b6c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e05c      	b.n	8000a74 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d106      	bne.n	80009ce <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fe95 	bl	80016f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009ce:	f001 f8cd 	bl	8001b6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009d2:	f000 fb6b 	bl	80010ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009d6:	f001 f8b1 	bl	8001b3c <vPortEnterCritical>
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e6:	d103      	bne.n	80009f0 <xQueueGenericSend+0xc4>
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009f0:	6a3b      	ldr	r3, [r7, #32]
 80009f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d103      	bne.n	8000a06 <xQueueGenericSend+0xda>
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a06:	f001 f8b1 	bl	8001b6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a0a:	1d3a      	adds	r2, r7, #4
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fe84 	bl	8001720 <xTaskCheckForTimeOut>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d124      	bne.n	8000a68 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a1e:	6a38      	ldr	r0, [r7, #32]
 8000a20:	f000 f990 	bl	8000d44 <prvIsQueueFull>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d018      	beq.n	8000a5c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	3310      	adds	r3, #16
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fd80 	bl	8001538 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a38:	6a38      	ldr	r0, [r7, #32]
 8000a3a:	f000 f91b 	bl	8000c74 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a3e:	f000 fb43 	bl	80010c8 <xTaskResumeAll>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f47f af7c 	bne.w	8000942 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <xQueueGenericSend+0x150>)
 8000a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	f3bf 8f4f 	dsb	sy
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	e772      	b.n	8000942 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a5c:	6a38      	ldr	r0, [r7, #32]
 8000a5e:	f000 f909 	bl	8000c74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a62:	f000 fb31 	bl	80010c8 <xTaskResumeAll>
 8000a66:	e76c      	b.n	8000942 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a68:	6a38      	ldr	r0, [r7, #32]
 8000a6a:	f000 f903 	bl	8000c74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a6e:	f000 fb2b 	bl	80010c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000a72:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	e000ed04 	.word	0xe000ed04

08000a80 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a92:	f001 f853 	bl	8001b3c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9a:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01b      	beq.n	8000ada <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00f      	beq.n	8000ad2 <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3310      	adds	r3, #16
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fd54 	bl	8001564 <xTaskRemoveFromEventList>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <xQueueSemaphoreTake+0x138>)
 8000ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	f3bf 8f4f 	dsb	sy
 8000ace:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000ad2:	f001 f84b 	bl	8001b6c <vPortExitCritical>
                return pdPASS;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e069      	b.n	8000bae <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <xQueueSemaphoreTake+0x68>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000ae0:	f001 f844 	bl	8001b6c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e062      	b.n	8000bae <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d106      	bne.n	8000afc <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fdfe 	bl	80016f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000afc:	f001 f836 	bl	8001b6c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b00:	f000 fad4 	bl	80010ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b04:	f001 f81a 	bl	8001b3c <vPortEnterCritical>
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d103      	bne.n	8000b1e <xQueueSemaphoreTake+0x9e>
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2a:	d103      	bne.n	8000b34 <xQueueSemaphoreTake+0xb4>
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b34:	f001 f81a 	bl	8001b6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b38:	463a      	mov	r2, r7
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fded 	bl	8001720 <xTaskCheckForTimeOut>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d123      	bne.n	8000b94 <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b4c:	69b8      	ldr	r0, [r7, #24]
 8000b4e:	f000 f8e3 	bl	8000d18 <prvIsQueueEmpty>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d017      	beq.n	8000b88 <xQueueSemaphoreTake+0x108>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	3324      	adds	r3, #36	; 0x24
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fce9 	bl	8001538 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b66:	69b8      	ldr	r0, [r7, #24]
 8000b68:	f000 f884 	bl	8000c74 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000b6c:	f000 faac 	bl	80010c8 <xTaskResumeAll>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d18d      	bne.n	8000a92 <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <xQueueSemaphoreTake+0x138>)
 8000b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	f3bf 8f6f 	isb	sy
 8000b86:	e784      	b.n	8000a92 <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000b88:	69b8      	ldr	r0, [r7, #24]
 8000b8a:	f000 f873 	bl	8000c74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b8e:	f000 fa9b 	bl	80010c8 <xTaskResumeAll>
 8000b92:	e77e      	b.n	8000a92 <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000b94:	69b8      	ldr	r0, [r7, #24]
 8000b96:	f000 f86d 	bl	8000c74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b9a:	f000 fa95 	bl	80010c8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b9e:	69b8      	ldr	r0, [r7, #24]
 8000ba0:	f000 f8ba 	bl	8000d18 <prvIsQueueEmpty>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f43f af73 	beq.w	8000a92 <xQueueSemaphoreTake+0x12>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000bac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000ed04 	.word	0xe000ed04

08000bbc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd0:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d043      	beq.n	8000c62 <prvCopyDataToQueue+0xa6>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d119      	bne.n	8000c14 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6858      	ldr	r0, [r3, #4]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	461a      	mov	r2, r3
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	f001 fabc 	bl	8002168 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	441a      	add	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d32b      	bcc.n	8000c62 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	e026      	b.n	8000c62 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	68d8      	ldr	r0, [r3, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	f001 faa2 	bl	8002168 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	441a      	add	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	425b      	negs	r3, r3
 8000c4a:	441a      	add	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d105      	bne.n	8000c62 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000c6a:	693b      	ldr	r3, [r7, #16]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000c7c:	f000 ff5e 	bl	8001b3c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c86:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c88:	e011      	b.n	8000cae <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d012      	beq.n	8000cb8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3324      	adds	r3, #36	; 0x24
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fc64 	bl	8001564 <xTaskRemoveFromEventList>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000ca2:	f000 fd87 	bl	80017b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dce9      	bgt.n	8000c8a <prvUnlockQueue+0x16>
 8000cb6:	e000      	b.n	8000cba <prvUnlockQueue+0x46>
                    break;
 8000cb8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	22ff      	movs	r2, #255	; 0xff
 8000cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000cc2:	f000 ff53 	bl	8001b6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000cc6:	f000 ff39 	bl	8001b3c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cd0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000cd2:	e011      	b.n	8000cf8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d012      	beq.n	8000d02 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3310      	adds	r3, #16
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fc3f 	bl	8001564 <xTaskRemoveFromEventList>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000cec:	f000 fd62 	bl	80017b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dce9      	bgt.n	8000cd4 <prvUnlockQueue+0x60>
 8000d00:	e000      	b.n	8000d04 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000d02:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000d0c:	f000 ff2e 	bl	8001b6c <vPortExitCritical>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000d20:	f000 ff0c 	bl	8001b3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e001      	b.n	8000d36 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000d36:	f000 ff19 	bl	8001b6c <vPortExitCritical>

    return xReturn;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000d4c:	f000 fef6 	bl	8001b3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d102      	bne.n	8000d62 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e001      	b.n	8000d66 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000d66:	f000 ff01 	bl	8001b6c <vPortExitCritical>

    return xReturn;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af04      	add	r7, sp, #16
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 ff67 	bl	8001c5c <pvPortMalloc>
 8000d8e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d013      	beq.n	8000dbe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d96:	204c      	movs	r0, #76	; 0x4c
 8000d98:	f000 ff60 	bl	8001c5c <pvPortMalloc>
 8000d9c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d008      	beq.n	8000db6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000da4:	224c      	movs	r2, #76	; 0x4c
 8000da6:	2100      	movs	r1, #0
 8000da8:	69f8      	ldr	r0, [r7, #28]
 8000daa:	f001 f9e8 	bl	800217e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
 8000db4:	e005      	b.n	8000dc2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f000 ffea 	bl	8001d90 <vPortFree>
 8000dbc:	e001      	b.n	8000dc2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000dc8:	88fa      	ldrh	r2, [r7, #6]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f000 f80e 	bl	8000e00 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000de4:	69f8      	ldr	r0, [r7, #28]
 8000de6:	f000 f871 	bl	8000ecc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	e002      	b.n	8000df6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000df6:	69bb      	ldr	r3, [r7, #24]
    }
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	f023 0307 	bic.w	r3, r3, #7
 8000e26:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d01e      	beq.n	8000e6c <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e012      	b.n	8000e5a <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	7819      	ldrb	r1, [r3, #0]
 8000e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	4413      	add	r3, r2
 8000e42:	3334      	adds	r3, #52	; 0x34
 8000e44:	460a      	mov	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d9e9      	bls.n	8000e34 <prvInitialiseNewTask+0x34>
 8000e60:	e000      	b.n	8000e64 <prvInitialiseNewTask+0x64>
            {
                break;
 8000e62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d901      	bls.n	8000e76 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e72:	2304      	movs	r3, #4
 8000e74:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e78:	6a3a      	ldr	r2, [r7, #32]
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7e:	3304      	adds	r3, #4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fc08 	bl	8000696 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	3318      	adds	r3, #24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc03 	bl	8000696 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e94:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	f1c3 0205 	rsb	r2, r3, #5
 8000e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	68f9      	ldr	r1, [r7, #12]
 8000eaa:	6938      	ldr	r0, [r7, #16]
 8000eac:	f000 fdbc 	bl	8001a28 <pxPortInitialiseStack>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <prvInitialiseNewTask+0xc2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ec0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ed4:	f000 fe32 	bl	8001b3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <prvAddNewTaskToReadyList+0x108>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a3d      	ldr	r2, [pc, #244]	; (8000fd4 <prvAddNewTaskToReadyList+0x108>)
 8000ee0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <prvAddNewTaskToReadyList+0x10c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d109      	bne.n	8000efe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000eea:	4a3b      	ldr	r2, [pc, #236]	; (8000fd8 <prvAddNewTaskToReadyList+0x10c>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <prvAddNewTaskToReadyList+0x108>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d110      	bne.n	8000f1a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ef8:	f000 fc80 	bl	80017fc <prvInitialiseTaskLists>
 8000efc:	e00d      	b.n	8000f1a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <prvAddNewTaskToReadyList+0x110>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d109      	bne.n	8000f1a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <prvAddNewTaskToReadyList+0x10c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d802      	bhi.n	8000f1a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f14:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <prvAddNewTaskToReadyList+0x10c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <prvAddNewTaskToReadyList+0x114>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <prvAddNewTaskToReadyList+0x114>)
 8000f22:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <prvAddNewTaskToReadyList+0x118>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <prvAddNewTaskToReadyList+0x118>)
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3a:	492b      	ldr	r1, [pc, #172]	; (8000fe8 <prvAddNewTaskToReadyList+0x11c>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	3304      	adds	r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	3204      	adds	r2, #4
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1d1a      	adds	r2, r3, #4
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <prvAddNewTaskToReadyList+0x11c>)
 8000f7a:	441a      	add	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f84:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <prvAddNewTaskToReadyList+0x11c>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1c59      	adds	r1, r3, #1
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <prvAddNewTaskToReadyList+0x11c>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000fa2:	f000 fde3 	bl	8001b6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <prvAddNewTaskToReadyList+0x110>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00e      	beq.n	8000fcc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <prvAddNewTaskToReadyList+0x10c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <prvAddNewTaskToReadyList+0x120>)
 8000fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200000fc 	.word	0x200000fc
 8000fd8:	20000024 	.word	0x20000024
 8000fdc:	20000108 	.word	0x20000108
 8000fe0:	20000118 	.word	0x20000118
 8000fe4:	20000104 	.word	0x20000104
 8000fe8:	20000028 	.word	0x20000028
 8000fec:	e000ed04 	.word	0xe000ed04

08000ff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8001002:	f000 f853 	bl	80010ac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fc8d 	bl	8001928 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800100e:	f000 f85b 	bl	80010c8 <xTaskResumeAll>
 8001012:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d107      	bne.n	800102a <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <vTaskDelay+0x44>)
 800101c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	f3bf 8f4f 	dsb	sy
 8001026:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000ed04 	.word	0xe000ed04

08001038 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <vTaskStartScheduler+0x58>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2300      	movs	r3, #0
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	4912      	ldr	r1, [pc, #72]	; (8001094 <vTaskStartScheduler+0x5c>)
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <vTaskStartScheduler+0x60>)
 800104e:	f7ff fe91 	bl	8000d74 <xTaskCreate>
 8001052:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d114      	bne.n	8001084 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800105a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800105e:	f383 8811 	msr	BASEPRI, r3
 8001062:	f3bf 8f6f 	isb	sy
 8001066:	f3bf 8f4f 	dsb	sy
 800106a:	603b      	str	r3, [r7, #0]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <vTaskStartScheduler+0x64>)
 800106e:	f04f 32ff 	mov.w	r2, #4294967295
 8001072:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <vTaskStartScheduler+0x68>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <vTaskStartScheduler+0x6c>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001080:	f000 fd3c 	bl	8001afc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <vTaskStartScheduler+0x70>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000120 	.word	0x20000120
 8001094:	080021a8 	.word	0x080021a8
 8001098:	080017cd 	.word	0x080017cd
 800109c:	2000011c 	.word	0x2000011c
 80010a0:	20000108 	.word	0x20000108
 80010a4:	20000100 	.word	0x20000100
 80010a8:	20000000 	.word	0x20000000

080010ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <vTaskSuspendAll+0x18>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <vTaskSuspendAll+0x18>)
 80010b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000124 	.word	0x20000124

080010c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010d6:	f000 fd31 	bl	8001b3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80010da:	4b68      	ldr	r3, [pc, #416]	; (800127c <xTaskResumeAll+0x1b4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	4a66      	ldr	r2, [pc, #408]	; (800127c <xTaskResumeAll+0x1b4>)
 80010e2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010e4:	4b65      	ldr	r3, [pc, #404]	; (800127c <xTaskResumeAll+0x1b4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 80c0 	bne.w	800126e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <xTaskResumeAll+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80bb 	beq.w	800126e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010f8:	e08a      	b.n	8001210 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <xTaskResumeAll+0x1bc>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	6a12      	ldr	r2, [r2, #32]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	69d2      	ldr	r2, [r2, #28]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3318      	adds	r3, #24
 8001124:	429a      	cmp	r2, r3
 8001126:	d103      	bne.n	8001130 <xTaskResumeAll+0x68>
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	68d2      	ldr	r2, [r2, #12]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6892      	ldr	r2, [r2, #8]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3304      	adds	r3, #4
 8001162:	429a      	cmp	r2, r3
 8001164:	d103      	bne.n	800116e <xTaskResumeAll+0xa6>
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	2201      	movs	r2, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	4b40      	ldr	r3, [pc, #256]	; (8001288 <xTaskResumeAll+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4313      	orrs	r3, r2
 800118c:	4a3e      	ldr	r2, [pc, #248]	; (8001288 <xTaskResumeAll+0x1c0>)
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	493d      	ldr	r1, [pc, #244]	; (800128c <xTaskResumeAll+0x1c4>)
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	3304      	adds	r3, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	3204      	adds	r2, #4
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	1d1a      	adds	r2, r3, #4
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a2e      	ldr	r2, [pc, #184]	; (800128c <xTaskResumeAll+0x1c4>)
 80011d4:	441a      	add	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011de:	492b      	ldr	r1, [pc, #172]	; (800128c <xTaskResumeAll+0x1c4>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1c59      	adds	r1, r3, #1
 80011ee:	4827      	ldr	r0, [pc, #156]	; (800128c <xTaskResumeAll+0x1c4>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4403      	add	r3, r0
 80011fa:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <xTaskResumeAll+0x1c8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	429a      	cmp	r2, r3
 8001208:	d302      	bcc.n	8001210 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <xTaskResumeAll+0x1cc>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <xTaskResumeAll+0x1bc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f af70 	bne.w	80010fa <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001220:	f000 fb68 	bl	80018f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <xTaskResumeAll+0x1d0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d010      	beq.n	8001252 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001230:	f000 f836 	bl	80012a0 <xTaskIncrementTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <xTaskResumeAll+0x1cc>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3b01      	subs	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f1      	bne.n	8001230 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <xTaskResumeAll+0x1d0>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <xTaskResumeAll+0x1cc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800125a:	2301      	movs	r3, #1
 800125c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <xTaskResumeAll+0x1d4>)
 8001260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	f3bf 8f4f 	dsb	sy
 800126a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800126e:	f000 fc7d 	bl	8001b6c <vPortExitCritical>

    return xAlreadyYielded;
 8001272:	693b      	ldr	r3, [r7, #16]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000124 	.word	0x20000124
 8001280:	200000fc 	.word	0x200000fc
 8001284:	200000bc 	.word	0x200000bc
 8001288:	20000104 	.word	0x20000104
 800128c:	20000028 	.word	0x20000028
 8001290:	20000024 	.word	0x20000024
 8001294:	20000110 	.word	0x20000110
 8001298:	2000010c 	.word	0x2000010c
 800129c:	e000ed04 	.word	0xe000ed04

080012a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012aa:	4b75      	ldr	r3, [pc, #468]	; (8001480 <xTaskIncrementTick+0x1e0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 80dc 	bne.w	800146c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80012b4:	4b73      	ldr	r3, [pc, #460]	; (8001484 <xTaskIncrementTick+0x1e4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80012bc:	4a71      	ldr	r2, [pc, #452]	; (8001484 <xTaskIncrementTick+0x1e4>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d110      	bne.n	80012ea <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80012c8:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <xTaskIncrementTick+0x1e8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b6f      	ldr	r3, [pc, #444]	; (800148c <xTaskIncrementTick+0x1ec>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6d      	ldr	r2, [pc, #436]	; (8001488 <xTaskIncrementTick+0x1e8>)
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4a6d      	ldr	r2, [pc, #436]	; (800148c <xTaskIncrementTick+0x1ec>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <xTaskIncrementTick+0x1f0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a6b      	ldr	r2, [pc, #428]	; (8001490 <xTaskIncrementTick+0x1f0>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	f000 fb05 	bl	80018f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80012ea:	4b6a      	ldr	r3, [pc, #424]	; (8001494 <xTaskIncrementTick+0x1f4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f0c0 80a6 	bcc.w	8001442 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012f6:	4b64      	ldr	r3, [pc, #400]	; (8001488 <xTaskIncrementTick+0x1e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d104      	bne.n	800130a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001300:	4b64      	ldr	r3, [pc, #400]	; (8001494 <xTaskIncrementTick+0x1f4>)
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	601a      	str	r2, [r3, #0]
                    break;
 8001308:	e09b      	b.n	8001442 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <xTaskIncrementTick+0x1e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	429a      	cmp	r2, r3
 8001320:	d203      	bcs.n	800132a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <xTaskIncrementTick+0x1f4>)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001328:	e08b      	b.n	8001442 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68d2      	ldr	r2, [r2, #12]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	6892      	ldr	r2, [r2, #8]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	3304      	adds	r3, #4
 800134c:	429a      	cmp	r2, r3
 800134e:	d103      	bne.n	8001358 <xTaskIncrementTick+0xb8>
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01e      	beq.n	80013ae <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	6a12      	ldr	r2, [r2, #32]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	69d2      	ldr	r2, [r2, #28]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	3318      	adds	r3, #24
 8001392:	429a      	cmp	r2, r3
 8001394:	d103      	bne.n	800139e <xTaskIncrementTick+0xfe>
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	2201      	movs	r2, #1
 80013b4:	409a      	lsls	r2, r3
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <xTaskIncrementTick+0x1f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	4a36      	ldr	r2, [pc, #216]	; (8001498 <xTaskIncrementTick+0x1f8>)
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <xTaskIncrementTick+0x1fc>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3304      	adds	r3, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	3204      	adds	r2, #4
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1d1a      	adds	r2, r3, #4
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4a26      	ldr	r2, [pc, #152]	; (800149c <xTaskIncrementTick+0x1fc>)
 8001404:	441a      	add	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140e:	4923      	ldr	r1, [pc, #140]	; (800149c <xTaskIncrementTick+0x1fc>)
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1c59      	adds	r1, r3, #1
 800141e:	481f      	ldr	r0, [pc, #124]	; (800149c <xTaskIncrementTick+0x1fc>)
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4403      	add	r3, r0
 800142a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <xTaskIncrementTick+0x200>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	429a      	cmp	r2, r3
 8001438:	f67f af5d 	bls.w	80012f6 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 800143c:	2301      	movs	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001440:	e759      	b.n	80012f6 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <xTaskIncrementTick+0x200>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	4914      	ldr	r1, [pc, #80]	; (800149c <xTaskIncrementTick+0x1fc>)
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d901      	bls.n	800145e <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <xTaskIncrementTick+0x204>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e004      	b.n	8001476 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <xTaskIncrementTick+0x208>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <xTaskIncrementTick+0x208>)
 8001474:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001476:	69fb      	ldr	r3, [r7, #28]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000124 	.word	0x20000124
 8001484:	20000100 	.word	0x20000100
 8001488:	200000b4 	.word	0x200000b4
 800148c:	200000b8 	.word	0x200000b8
 8001490:	20000114 	.word	0x20000114
 8001494:	2000011c 	.word	0x2000011c
 8001498:	20000104 	.word	0x20000104
 800149c:	20000028 	.word	0x20000028
 80014a0:	20000024 	.word	0x20000024
 80014a4:	20000110 	.word	0x20000110
 80014a8:	2000010c 	.word	0x2000010c

080014ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <vTaskSwitchContext+0x78>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <vTaskSwitchContext+0x7c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80014c0:	e02a      	b.n	8001518 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <vTaskSwitchContext+0x7c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <vTaskSwitchContext+0x80>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f1c3 031f 	rsb	r3, r3, #31
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <vTaskSwitchContext+0x84>)
 80014ea:	4413      	add	r3, r2
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3308      	adds	r3, #8
 8001500:	429a      	cmp	r2, r3
 8001502:	d104      	bne.n	800150e <vTaskSwitchContext+0x62>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <vTaskSwitchContext+0x88>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000124 	.word	0x20000124
 8001528:	20000110 	.word	0x20000110
 800152c:	20000104 	.word	0x20000104
 8001530:	20000028 	.word	0x20000028
 8001534:	20000024 	.word	0x20000024

08001538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <vTaskPlaceOnEventList+0x28>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3318      	adds	r3, #24
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff f8af 	bl	80006ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001550:	2101      	movs	r1, #1
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f000 f9e8 	bl	8001928 <prvAddCurrentTaskToDelayedList>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000024 	.word	0x20000024

08001564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	6a12      	ldr	r2, [r2, #32]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	69d2      	ldr	r2, [r2, #28]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	3318      	adds	r3, #24
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <xTaskRemoveFromEventList+0x3e>
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6a1a      	ldr	r2, [r3, #32]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <xTaskRemoveFromEventList+0x178>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d15e      	bne.n	8001678 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	68d2      	ldr	r2, [r2, #12]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	6892      	ldr	r2, [r2, #8]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	3304      	adds	r3, #4
 80015dc:	429a      	cmp	r2, r3
 80015de:	d103      	bne.n	80015e8 <xTaskRemoveFromEventList+0x84>
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2201      	movs	r2, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <xTaskRemoveFromEventList+0x17c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4313      	orrs	r3, r2
 8001606:	4a36      	ldr	r2, [pc, #216]	; (80016e0 <xTaskRemoveFromEventList+0x17c>)
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160e:	4935      	ldr	r1, [pc, #212]	; (80016e4 <xTaskRemoveFromEventList+0x180>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3304      	adds	r3, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	3204      	adds	r2, #4
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1d1a      	adds	r2, r3, #4
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <xTaskRemoveFromEventList+0x180>)
 800164e:	441a      	add	r2, r3
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	4922      	ldr	r1, [pc, #136]	; (80016e4 <xTaskRemoveFromEventList+0x180>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1c59      	adds	r1, r3, #1
 8001668:	481e      	ldr	r0, [pc, #120]	; (80016e4 <xTaskRemoveFromEventList+0x180>)
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4403      	add	r3, r0
 8001674:	6019      	str	r1, [r3, #0]
 8001676:	e01b      	b.n	80016b0 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <xTaskRemoveFromEventList+0x184>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	61da      	str	r2, [r3, #28]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	621a      	str	r2, [r3, #32]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	3218      	adds	r2, #24
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f103 0218 	add.w	r2, r3, #24
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <xTaskRemoveFromEventList+0x184>)
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <xTaskRemoveFromEventList+0x184>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <xTaskRemoveFromEventList+0x184>)
 80016ae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <xTaskRemoveFromEventList+0x188>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d905      	bls.n	80016ca <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <xTaskRemoveFromEventList+0x18c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e001      	b.n	80016ce <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80016ce:	69fb      	ldr	r3, [r7, #28]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3724      	adds	r7, #36	; 0x24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000124 	.word	0x20000124
 80016e0:	20000104 	.word	0x20000104
 80016e4:	20000028 	.word	0x20000028
 80016e8:	200000bc 	.word	0x200000bc
 80016ec:	20000024 	.word	0x20000024
 80016f0:	20000110 	.word	0x20000110

080016f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <vTaskInternalSetTimeOutState+0x24>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <vTaskInternalSetTimeOutState+0x28>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000114 	.word	0x20000114
 800171c:	20000100 	.word	0x20000100

08001720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800172a:	f000 fa07 	bl	8001b3c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <xTaskCheckForTimeOut+0x8c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d102      	bne.n	800174e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e026      	b.n	800179c <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <xTaskCheckForTimeOut+0x90>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d00a      	beq.n	8001770 <xTaskCheckForTimeOut+0x50>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d305      	bcc.n	8001770 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e015      	b.n	800179c <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	429a      	cmp	r2, r3
 8001778:	d20b      	bcs.n	8001792 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad2      	subs	r2, r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb4 	bl	80016f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e004      	b.n	800179c <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001798:	2301      	movs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800179c:	f000 f9e6 	bl	8001b6c <vPortExitCritical>

    return xReturn;
 80017a0:	697b      	ldr	r3, [r7, #20]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000100 	.word	0x20000100
 80017b0:	20000114 	.word	0x20000114

080017b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <vTaskMissedYield+0x14>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000110 	.word	0x20000110

080017cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80017d4:	f000 f852 	bl	800187c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <prvIdleTask+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d9f9      	bls.n	80017d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <prvIdleTask+0x2c>)
 80017e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f3bf 8f4f 	dsb	sy
 80017ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80017f0:	e7f0      	b.n	80017d4 <prvIdleTask+0x8>
 80017f2:	bf00      	nop
 80017f4:	20000028 	.word	0x20000028
 80017f8:	e000ed04 	.word	0xe000ed04

080017fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	e00c      	b.n	8001822 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <prvInitialiseTaskLists+0x60>)
 8001814:	4413      	add	r3, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe ff1e 	bl	8000658 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d9ef      	bls.n	8001808 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <prvInitialiseTaskLists+0x64>)
 800182a:	f7fe ff15 	bl	8000658 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <prvInitialiseTaskLists+0x68>)
 8001830:	f7fe ff12 	bl	8000658 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <prvInitialiseTaskLists+0x6c>)
 8001836:	f7fe ff0f 	bl	8000658 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <prvInitialiseTaskLists+0x70>)
 800183c:	f7fe ff0c 	bl	8000658 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <prvInitialiseTaskLists+0x74>)
 8001842:	f7fe ff09 	bl	8000658 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <prvInitialiseTaskLists+0x78>)
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <prvInitialiseTaskLists+0x64>)
 800184a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <prvInitialiseTaskLists+0x7c>)
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <prvInitialiseTaskLists+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000028 	.word	0x20000028
 8001860:	2000008c 	.word	0x2000008c
 8001864:	200000a0 	.word	0x200000a0
 8001868:	200000bc 	.word	0x200000bc
 800186c:	200000d0 	.word	0x200000d0
 8001870:	200000e8 	.word	0x200000e8
 8001874:	200000b4 	.word	0x200000b4
 8001878:	200000b8 	.word	0x200000b8

0800187c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001882:	e019      	b.n	80018b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001884:	f000 f95a 	bl	8001b3c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <prvCheckTasksWaitingTermination+0x4c>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe ff42 	bl	800071e <uxListRemove>
                --uxCurrentNumberOfTasks;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <prvCheckTasksWaitingTermination+0x50>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3b01      	subs	r3, #1
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <prvCheckTasksWaitingTermination+0x50>)
 80018a2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <prvCheckTasksWaitingTermination+0x54>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <prvCheckTasksWaitingTermination+0x54>)
 80018ac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80018ae:	f000 f95d 	bl	8001b6c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f80e 	bl	80018d4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <prvCheckTasksWaitingTermination+0x54>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e1      	bne.n	8001884 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200000d0 	.word	0x200000d0
 80018cc:	200000fc 	.word	0x200000fc
 80018d0:	200000e4 	.word	0x200000e4

080018d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fa55 	bl	8001d90 <vPortFree>
            vPortFree( pxTCB );
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fa52 	bl	8001d90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <prvResetNextTaskUnblockTime+0x2c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d104      	bne.n	800190c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <prvResetNextTaskUnblockTime+0x30>)
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800190a:	e005      	b.n	8001918 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <prvResetNextTaskUnblockTime+0x2c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <prvResetNextTaskUnblockTime+0x30>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	200000b4 	.word	0x200000b4
 8001924:	2000011c 	.word	0x2000011c

08001928 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001932:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3304      	adds	r3, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe feed 	bl	800071e <uxListRemove>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10b      	bne.n	8001962 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2201      	movs	r2, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <prvAddCurrentTaskToDelayedList+0xec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4013      	ands	r3, r2
 800195e:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <prvAddCurrentTaskToDelayedList+0xec>)
 8001960:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d124      	bne.n	80019b4 <prvAddCurrentTaskToDelayedList+0x8c>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	3204      	adds	r2, #4
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80019b2:	e026      	b.n	8001a02 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d209      	bcs.n	80019e0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <prvAddCurrentTaskToDelayedList+0xf4>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3304      	adds	r3, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7fe fe68 	bl	80006ae <vListInsert>
}
 80019de:	e010      	b.n	8001a02 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <prvAddCurrentTaskToDelayedList+0xf8>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3304      	adds	r3, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f7fe fe5e 	bl	80006ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <prvAddCurrentTaskToDelayedList+0xfc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d202      	bcs.n	8001a02 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <prvAddCurrentTaskToDelayedList+0xfc>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000100 	.word	0x20000100
 8001a10:	20000024 	.word	0x20000024
 8001a14:	20000104 	.word	0x20000104
 8001a18:	200000e8 	.word	0x200000e8
 8001a1c:	200000b8 	.word	0x200000b8
 8001a20:	200000b4 	.word	0x200000b4
 8001a24:	2000011c 	.word	0x2000011c

08001a28 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3b04      	subs	r3, #4
 8001a38:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3b04      	subs	r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f023 0201 	bic.w	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b04      	subs	r3, #4
 8001a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <pxPortInitialiseStack+0x54>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3b14      	subs	r3, #20
 8001a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3b20      	subs	r3, #32
 8001a6e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	08001a81 	.word	0x08001a81

08001a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001a8a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001a9c:	bf00      	nop
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0fc      	beq.n	8001a9e <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <pxCurrentTCBConst2>)
 8001ab2:	6819      	ldr	r1, [r3, #0]
 8001ab4:	6808      	ldr	r0, [r1, #0]
 8001ab6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001aba:	f380 8809 	msr	PSP, r0
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f380 8811 	msr	BASEPRI, r0
 8001aca:	f04e 0e0d 	orr.w	lr, lr, #13
 8001ace:	4770      	bx	lr

08001ad0 <pxCurrentTCBConst2>:
 8001ad0:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop

08001ad8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <prvPortStartFirstTask+0x1c>)
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	6800      	ldr	r0, [r0, #0]
 8001ade:	f380 8808 	msr	MSP, r0
 8001ae2:	b662      	cpsie	i
 8001ae4:	b661      	cpsie	f
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	f3bf 8f6f 	isb	sy
 8001aee:	df00      	svc	0
 8001af0:	bf00      	nop
 8001af2:	0000      	.short	0x0000
 8001af4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop

08001afc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <xPortStartScheduler+0x38>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <xPortStartScheduler+0x38>)
 8001b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <xPortStartScheduler+0x38>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <xPortStartScheduler+0x38>)
 8001b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b16:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001b18:	f000 f886 	bl	8001c28 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <xPortStartScheduler+0x3c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001b22:	f7ff ffd9 	bl	8001ad8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001b26:	f7ff fcc1 	bl	80014ac <vTaskSwitchContext>
    prvTaskExitError();
 8001b2a:	f7ff ffa9 	bl	8001a80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	e000ed20 	.word	0xe000ed20
 8001b38:	20000004 	.word	0x20000004

08001b3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b46:	f383 8811 	msr	BASEPRI, r3
 8001b4a:	f3bf 8f6f 	isb	sy
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <vPortEnterCritical+0x2c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <vPortEnterCritical+0x2c>)
 8001b5c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000004 	.word	0x20000004

08001b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <vPortExitCritical+0x2c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <vPortExitCritical+0x2c>)
 8001b7a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <vPortExitCritical+0x2c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <vPortExitCritical+0x22>
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ba0:	f3ef 8009 	mrs	r0, PSP
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <pxCurrentTCBConst>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bb0:	6010      	str	r0, [r2, #0]
 8001bb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001bb6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001bba:	f380 8811 	msr	BASEPRI, r0
 8001bbe:	f7ff fc75 	bl	80014ac <vTaskSwitchContext>
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f380 8811 	msr	BASEPRI, r0
 8001bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	6808      	ldr	r0, [r1, #0]
 8001bd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bd6:	f380 8809 	msr	PSP, r0
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	4770      	bx	lr

08001be0 <pxCurrentTCBConst>:
 8001be0:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop

08001be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
        __asm volatile
 8001bee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c00:	f7ff fb4e 	bl	80012a0 <xTaskIncrementTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <SysTick_Handler+0x3c>)
 8001c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	e000ed04 	.word	0xe000ed04

08001c28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <vPortSetupTimerInterrupt+0x28>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <vPortSetupTimerInterrupt+0x2c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <vPortSetupTimerInterrupt+0x30>)
 8001c3a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c3e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <vPortSetupTimerInterrupt+0x28>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010
 8001c54:	e000e018 	.word	0xe000e018
 8001c58:	e000e014 	.word	0xe000e014

08001c5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001c68:	f7ff fa20 	bl	80010ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <pvPortMalloc+0x120>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001c74:	f000 f8ca 	bl	8001e0c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001c7e:	2208      	movs	r2, #8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	3308      	adds	r3, #8
 8001c8a:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d804      	bhi.n	8001ca0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	e001      	b.n	8001ca4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db60      	blt.n	8001d6c <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05d      	beq.n	8001d6c <pvPortMalloc+0x110>
 8001cb0:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <pvPortMalloc+0x124>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d858      	bhi.n	8001d6c <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <pvPortMalloc+0x128>)
 8001cbc:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8001cbe:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <pvPortMalloc+0x128>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cc4:	e004      	b.n	8001cd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d903      	bls.n	8001ce2 <pvPortMalloc+0x86>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f1      	bne.n	8001cc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <pvPortMalloc+0x120>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d03f      	beq.n	8001d6c <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	4413      	add	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	1ad2      	subs	r2, r2, r3
 8001d06:	2308      	movs	r3, #8
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d90f      	bls.n	8001d2e <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f8cb 	bl	8001ec4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <pvPortMalloc+0x124>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <pvPortMalloc+0x124>)
 8001d3a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <pvPortMalloc+0x124>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <pvPortMalloc+0x12c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d203      	bcs.n	8001d50 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <pvPortMalloc+0x124>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <pvPortMalloc+0x12c>)
 8001d4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <pvPortMalloc+0x130>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <pvPortMalloc+0x130>)
 8001d6a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001d6c:	f7ff f9ac 	bl	80010c8 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001d70:	697b      	ldr	r3, [r7, #20]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20002130 	.word	0x20002130
 8001d80:	20002134 	.word	0x20002134
 8001d84:	20002128 	.word	0x20002128
 8001d88:	20002138 	.word	0x20002138
 8001d8c:	2000213c 	.word	0x2000213c

08001d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d02b      	beq.n	8001dfa <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001da2:	2308      	movs	r3, #8
 8001da4:	425b      	negs	r3, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	0fdb      	lsrs	r3, r3, #31
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01c      	beq.n	8001dfa <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d118      	bne.n	8001dfa <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001dd4:	f7ff f96a 	bl	80010ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <vPortFree+0x74>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <vPortFree+0x74>)
 8001de4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f000 f86c 	bl	8001ec4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <vPortFree+0x78>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <vPortFree+0x78>)
 8001df4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001df6:	f7ff f967 	bl	80010c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20002134 	.word	0x20002134
 8001e08:	20002140 	.word	0x20002140

08001e0c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <prvHeapInit+0xa4>)
 8001e1a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3307      	adds	r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0307 	bic.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <prvHeapInit+0xa4>)
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e44:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <prvHeapInit+0xa8>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <prvHeapInit+0xa8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001e58:	2208      	movs	r2, #8
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 0307 	bic.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <prvHeapInit+0xac>)
 8001e6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <prvHeapInit+0xac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <prvHeapInit+0xac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <prvHeapInit+0xac>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <prvHeapInit+0xb0>)
 8001e9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <prvHeapInit+0xb4>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000128 	.word	0x20000128
 8001eb4:	20002128 	.word	0x20002128
 8001eb8:	20002130 	.word	0x20002130
 8001ebc:	20002138 	.word	0x20002138
 8001ec0:	20002134 	.word	0x20002134

08001ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <prvInsertBlockIntoFreeList+0xa8>)
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e002      	b.n	8001ed8 <prvInsertBlockIntoFreeList+0x14>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d8f7      	bhi.n	8001ed2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	4413      	add	r3, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d108      	bne.n	8001f06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	441a      	add	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	441a      	add	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d118      	bne.n	8001f4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <prvInsertBlockIntoFreeList+0xac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d00d      	beq.n	8001f42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e008      	b.n	8001f54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <prvInsertBlockIntoFreeList+0xac>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e003      	b.n	8001f54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d002      	beq.n	8001f62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	20002128 	.word	0x20002128
 8001f70:	20002130 	.word	0x20002130

08001f74 <systemInit>:
/* Task Prototype */
void vPushButton(void *param);
void vLed(void *param);

void systemInit(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0


	MCAL_RCC_initSYSClk();
 8001f7a:	f7fe fb11 	bl	80005a0 <MCAL_RCC_initSYSClk>

	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOB_ID);
 8001f7e:	2103      	movs	r1, #3
 8001f80:	2002      	movs	r0, #2
 8001f82:	f7fe fb31 	bl	80005e8 <MCAL_RCC_enableCLK>

	GPIO_PinConfig_t config;

	config.GPIO_Mode = GPIO_MODE_INPUT_FLOATING;
 8001f86:	2301      	movs	r3, #1
 8001f88:	71bb      	strb	r3, [r7, #6]
	config.GPIO_PinNumber = GPIO_PIN1;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &config);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <systemInit+0x44>)
 8001f94:	f7fe fa06 	bl	80003a4 <MCAL_GPIO_Init>

	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	71bb      	strb	r3, [r7, #6]
	config.GPIO_PinNumber = GPIO_PIN13;
 8001f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa0:	80bb      	strh	r3, [r7, #4]
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOC, &config);
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4804      	ldr	r0, [pc, #16]	; (8001fbc <systemInit+0x48>)
 8001fac:	f7fe f9fa 	bl	80003a4 <MCAL_GPIO_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	40011000 	.word	0x40011000

08001fc0 <vPushButton>:

void vPushButton(void *param)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	while(1)
	{

		CurrFlag = MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1);
 8001fc8:	2102      	movs	r1, #2
 8001fca:	480e      	ldr	r0, [pc, #56]	; (8002004 <vPushButton+0x44>)
 8001fcc:	f7fe fa64 	bl	8000498 <MCAL_GPIO_ReadPin>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <vPushButton+0x48>)
 8001fd6:	701a      	strb	r2, [r3, #0]

		if(CurrFlag != PrevFlag)
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <vPushButton+0x48>)
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <vPushButton+0x4c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d006      	beq.n	8001ff2 <vPushButton+0x32>
		{
			xSemaphoreGive(xSemaphore1);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <vPushButton+0x50>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	f7fe fc9d 	bl	800092c <xQueueGenericSend>
		}
		PrevFlag = CurrFlag;
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <vPushButton+0x48>)
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <vPushButton+0x4c>)
 8001ff8:	701a      	strb	r2, [r3, #0]
		vTaskDelay(25);
 8001ffa:	2019      	movs	r0, #25
 8001ffc:	f7fe fff8 	bl	8000ff0 <vTaskDelay>
		CurrFlag = MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1);
 8002000:	e7e2      	b.n	8001fc8 <vPushButton+0x8>
 8002002:	bf00      	nop
 8002004:	40010800 	.word	0x40010800
 8002008:	20002144 	.word	0x20002144
 800200c:	20002145 	.word	0x20002145
 8002010:	20002148 	.word	0x20002148

08002014 <vLed>:
	}
}

void vLed(void *param)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(xSemaphore1, (TickType_t)5 ) == pdTRUE)
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <vLed+0x44>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2105      	movs	r1, #5
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fd2c 	bl	8000a80 <xQueueSemaphoreTake>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d110      	bne.n	8002050 <vLed+0x3c>
		{
			if(CurrFlag == 1)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <vLed+0x48>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d106      	bne.n	8002044 <vLed+0x30>
			{
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN13, LOGIC_HIGH);
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <vLed+0x4c>)
 800203e:	f7fe fa42 	bl	80004c6 <MCAL_GPIO_WritePin>
 8002042:	e005      	b.n	8002050 <vLed+0x3c>
			}else
			{
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN13, LOGIC_LOW);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <vLed+0x4c>)
 800204c:	f7fe fa3b 	bl	80004c6 <MCAL_GPIO_WritePin>
			}
		}
		vTaskDelay(25);
 8002050:	2019      	movs	r0, #25
 8002052:	f7fe ffcd 	bl	8000ff0 <vTaskDelay>
		if(xSemaphoreTake(xSemaphore1, (TickType_t)5 ) == pdTRUE)
 8002056:	e7e1      	b.n	800201c <vLed+0x8>
 8002058:	20002148 	.word	0x20002148
 800205c:	20002144 	.word	0x20002144
 8002060:	40011000 	.word	0x40011000

08002064 <main>:
	}
}

int main(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af02      	add	r7, sp, #8
	systemInit();
 800206a:	f7ff ff83 	bl	8001f74 <systemInit>

	xTaskCreate(vLed, "Led", 128, NULL, 1, vLedHandle);
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <main+0x4c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	2301      	movs	r3, #1
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2300      	movs	r3, #0
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	490d      	ldr	r1, [pc, #52]	; (80020b4 <main+0x50>)
 800207e:	480e      	ldr	r0, [pc, #56]	; (80020b8 <main+0x54>)
 8002080:	f7fe fe78 	bl	8000d74 <xTaskCreate>
	xTaskCreate(vPushButton, "PushButton", 128, NULL, 2, vPushButtonHandle);
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <main+0x58>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	490b      	ldr	r1, [pc, #44]	; (80020c0 <main+0x5c>)
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <main+0x60>)
 8002096:	f7fe fe6d 	bl	8000d74 <xTaskCreate>

	xSemaphore1 = xSemaphoreCreateBinary();
 800209a:	2203      	movs	r2, #3
 800209c:	2100      	movs	r1, #0
 800209e:	2001      	movs	r0, #1
 80020a0:	f7fe fbe0 	bl	8000864 <xQueueGenericCreate>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <main+0x64>)
 80020a8:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 80020aa:	f7fe ffc5 	bl	8001038 <vTaskStartScheduler>

	/* Loop forever */
	while(1);
 80020ae:	e7fe      	b.n	80020ae <main+0x4a>
 80020b0:	20002150 	.word	0x20002150
 80020b4:	080021b0 	.word	0x080021b0
 80020b8:	08002015 	.word	0x08002015
 80020bc:	2000214c 	.word	0x2000214c
 80020c0:	080021b4 	.word	0x080021b4
 80020c4:	08001fc1 	.word	0x08001fc1
 80020c8:	20002148 	.word	0x20002148

080020cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020fa:	f000 f811 	bl	8002120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020fe:	f7ff ffb1 	bl	8002064 <main>

08002102 <LoopForever>:

LoopForever:
    b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   r0, =_estack
 8002104:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002110:	080021c8 	.word	0x080021c8
  ldr r2, =_sbss
 8002114:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002118:	20002190 	.word	0x20002190

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <__libc_init_array>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2500      	movs	r5, #0
 8002124:	4e0c      	ldr	r6, [pc, #48]	; (8002158 <__libc_init_array+0x38>)
 8002126:	4c0d      	ldr	r4, [pc, #52]	; (800215c <__libc_init_array+0x3c>)
 8002128:	1ba4      	subs	r4, r4, r6
 800212a:	10a4      	asrs	r4, r4, #2
 800212c:	42a5      	cmp	r5, r4
 800212e:	d109      	bne.n	8002144 <__libc_init_array+0x24>
 8002130:	f000 f82e 	bl	8002190 <_init>
 8002134:	2500      	movs	r5, #0
 8002136:	4e0a      	ldr	r6, [pc, #40]	; (8002160 <__libc_init_array+0x40>)
 8002138:	4c0a      	ldr	r4, [pc, #40]	; (8002164 <__libc_init_array+0x44>)
 800213a:	1ba4      	subs	r4, r4, r6
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	42a5      	cmp	r5, r4
 8002140:	d105      	bne.n	800214e <__libc_init_array+0x2e>
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002148:	4798      	blx	r3
 800214a:	3501      	adds	r5, #1
 800214c:	e7ee      	b.n	800212c <__libc_init_array+0xc>
 800214e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002152:	4798      	blx	r3
 8002154:	3501      	adds	r5, #1
 8002156:	e7f2      	b.n	800213e <__libc_init_array+0x1e>
 8002158:	080021c0 	.word	0x080021c0
 800215c:	080021c0 	.word	0x080021c0
 8002160:	080021c0 	.word	0x080021c0
 8002164:	080021c4 	.word	0x080021c4

08002168 <memcpy>:
 8002168:	b510      	push	{r4, lr}
 800216a:	1e43      	subs	r3, r0, #1
 800216c:	440a      	add	r2, r1
 800216e:	4291      	cmp	r1, r2
 8002170:	d100      	bne.n	8002174 <memcpy+0xc>
 8002172:	bd10      	pop	{r4, pc}
 8002174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800217c:	e7f7      	b.n	800216e <memcpy+0x6>

0800217e <memset>:
 800217e:	4603      	mov	r3, r0
 8002180:	4402      	add	r2, r0
 8002182:	4293      	cmp	r3, r2
 8002184:	d100      	bne.n	8002188 <memset+0xa>
 8002186:	4770      	bx	lr
 8002188:	f803 1b01 	strb.w	r1, [r3], #1
 800218c:	e7f9      	b.n	8002182 <memset+0x4>
	...

08002190 <_init>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	bf00      	nop
 8002194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002196:	bc08      	pop	{r3}
 8002198:	469e      	mov	lr, r3
 800219a:	4770      	bx	lr

0800219c <_fini>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr
