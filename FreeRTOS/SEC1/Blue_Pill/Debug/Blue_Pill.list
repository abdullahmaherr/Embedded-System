
Blue_Pill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ec  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001830  08001830  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001830  08001830  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001830  08001830  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001830  08001830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000217c  20000008  08001840  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002184  08001840  00022184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007038  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010d5  00000000  00000000  00027069  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001e68  00000000  00000000  0002813e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000410  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000388  00000000  00000000  0002a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002d2c  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003ca6  00000000  00000000  0002d46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00018597  00000000  00000000  00031112  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000496a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ee4  00000000  00000000  00049724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001804 	.word	0x08001804

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001804 	.word	0x08001804

08000170 <EXTI0_IRQHandler>:
/*===============================================================================
 *                       		 ISR Functions  		                         *
 ================================================================================*/

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[0])();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20002148 	.word	0x20002148

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[1])();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20002148 	.word	0x20002148

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[2])();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20002148 	.word	0x20002148

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[3])();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20002148 	.word	0x20002148

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
	SET_BIT(EXTI->PR,EXTI4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	/* Call The ISR CallBack Function */
	(*gp_EXTI_ISR_CallBack[4])();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20002148 	.word	0x20002148

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI5))
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <EXTI9_5_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI5);
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a24      	ldr	r2, [pc, #144]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[5])();
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI9);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[9])();
	}
}
 8000246:	e03e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI6))
 8000248:	4b20      	ldr	r3, [pc, #128]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000250:	2b00      	cmp	r3, #0
 8000252:	d009      	beq.n	8000268 <EXTI9_5_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI6);
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800025a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[6])();
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4798      	blx	r3
}
 8000266:	e02e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI7))
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <EXTI9_5_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI7);
 8000274:	4b15      	ldr	r3, [pc, #84]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a14      	ldr	r2, [pc, #80]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[7])();
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 8000282:	69db      	ldr	r3, [r3, #28]
 8000284:	4798      	blx	r3
}
 8000286:	e01e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI8))
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000290:	2b00      	cmp	r3, #0
 8000292:	d009      	beq.n	80002a8 <EXTI9_5_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI8);
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[8])();
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4798      	blx	r3
}
 80002a6:	e00e      	b.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI9))
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d008      	beq.n	80002c6 <EXTI9_5_IRQHandler+0xa2>
		SET_BIT(EXTI->PR,EXTI9);
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI9_5_IRQHandler+0xa8>)
 80002ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002be:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[9])();
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <EXTI9_5_IRQHandler+0xac>)
 80002c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c4:	4798      	blx	r3
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010400 	.word	0x40010400
 80002d0:	20002148 	.word	0x20002148

080002d4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	if(BIT_IS_SET(EXTI->PR,EXTI10))
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d009      	beq.n	80002f8 <EXTI15_10_IRQHandler+0x24>
	{
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI10);
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6153      	str	r3, [r2, #20]
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[10])();
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 80002f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f4:	4798      	blx	r3
		/* Clear The Pending Bit By Writing a ‘1’ Into The BiT */
		SET_BIT(EXTI->PR,EXTI15);
		/* Call The ISR CallBack Function */
		(*gp_EXTI_ISR_CallBack[15])();
	}
}
 80002f6:	e04e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI11))
 80002f8:	4b28      	ldr	r3, [pc, #160]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000300:	2b00      	cmp	r3, #0
 8000302:	d009      	beq.n	8000318 <EXTI15_10_IRQHandler+0x44>
		SET_BIT(EXTI->PR,EXTI11);
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a24      	ldr	r2, [pc, #144]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800030a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800030e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[11])();
 8000310:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000314:	4798      	blx	r3
}
 8000316:	e03e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI12))
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000320:	2b00      	cmp	r3, #0
 8000322:	d009      	beq.n	8000338 <EXTI15_10_IRQHandler+0x64>
		SET_BIT(EXTI->PR,EXTI12);
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800032a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[12])();
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4798      	blx	r3
}
 8000336:	e02e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI13))
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d009      	beq.n	8000358 <EXTI15_10_IRQHandler+0x84>
		SET_BIT(EXTI->PR,EXTI13);
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[13])();
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	4798      	blx	r3
}
 8000356:	e01e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI14))
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d009      	beq.n	8000378 <EXTI15_10_IRQHandler+0xa4>
		SET_BIT(EXTI->PR,EXTI14);
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[14])();
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000374:	4798      	blx	r3
}
 8000376:	e00e      	b.n	8000396 <EXTI15_10_IRQHandler+0xc2>
	}else if(BIT_IS_SET(EXTI->PR,EXTI15))
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <EXTI15_10_IRQHandler+0xc2>
		SET_BIT(EXTI->PR,EXTI15);
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI15_10_IRQHandler+0xc8>)
 800038a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800038e:	6153      	str	r3, [r2, #20]
		(*gp_EXTI_ISR_CallBack[15])();
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <EXTI15_10_IRQHandler+0xcc>)
 8000392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000394:	4798      	blx	r3
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010400 	.word	0x40010400
 80003a0:	20002148 	.word	0x20002148

080003a4 <MCAL_GPIO_Init>:
 * Parameter (in) : GPIOx x Could Be A,B,C,D and E.
 * Parameter (in) : a_PinConfig is Pointer to GPIO_PinConfig_t that Contain Configuration of Pin.
 * Return         : None.
 * Note           : That in LQFP48 GPIOA and GPIOB are fully included, GPIOC and GPIOD Partially Included, GPIOE Not Included*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* p_PinConfig)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	vuint32_t* CRHL = NULL_PTR;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
	uint8_t tempPinConfig = 0; /* Temporary Variable to Assign CRHL by (MODE + CNF) Bits */
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]

	/* Specifies Which Configuration Register Will Be Used (CRL 0>>>7) Or (CRH 8>>>15) */
	CRHL = ((p_PinConfig->GPIO_PinNumber) < GPIO_PIN8)?(&GPIOx->CRL):(&GPIOx->CRH);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	d801      	bhi.n	80003c2 <MCAL_GPIO_Init+0x1e>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	e001      	b.n	80003c6 <MCAL_GPIO_Init+0x22>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3304      	adds	r3, #4
 80003c6:	60bb      	str	r3, [r7, #8]

	/* Clear Default Value */
	(*CRHL) &= (~((0xF) << GET_PIN_POSITION(p_PinConfig->GPIO_PinNumber)));
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f87d 	bl	80004cc <GET_PIN_POSITION>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	230f      	movs	r3, #15
 80003d8:	4093      	lsls	r3, r2
 80003da:	43da      	mvns	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	401a      	ands	r2, r3
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	601a      	str	r2, [r3, #0]

	/* If The Pin Is OUTPUT */
	if((p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PUSHPULL) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OPENDRAIN) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PUSHPULL) || (p_PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OPENDRAIN))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d00b      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	789b      	ldrb	r3, [r3, #2]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d007      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	789b      	ldrb	r3, [r3, #2]
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d003      	beq.n	8000406 <MCAL_GPIO_Init+0x62>
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	2b07      	cmp	r3, #7
 8000404:	d10e      	bne.n	8000424 <MCAL_GPIO_Init+0x80>
	{
		/*Macros of OUTPUT MODE Assigned With Values To be Manipulated to get The Values that Set CNFy[1:0] MODEy[1:0] */
		tempPinConfig = ( ( (((p_PinConfig->GPIO_Mode) - 4) << 2) | (p_PinConfig->GPIO_Output_Speed) ) & 0x0F );
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	789b      	ldrb	r3, [r3, #2]
 800040a:	3b04      	subs	r3, #4
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	b25a      	sxtb	r2, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	78db      	ldrb	r3, [r3, #3]
 8000414:	b25b      	sxtb	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b25b      	sxtb	r3, r3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	f003 030f 	and.w	r3, r3, #15
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e027      	b.n	8000474 <MCAL_GPIO_Init+0xd0>
	}
	else /* Else The Pin Is INPUT */
	{
		if((p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLOATING) || (p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF_FLOATING))
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d003      	beq.n	8000434 <MCAL_GPIO_Init+0x90>
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	789b      	ldrb	r3, [r3, #2]
 8000430:	2b08      	cmp	r3, #8
 8000432:	d102      	bne.n	800043a <MCAL_GPIO_Init+0x96>
		{
			/* CNFy[1:0] = 01: Floating input */
			tempPinConfig = ( (((GPIO_MODE_INPUT_FLOATING) <<2) | 0x0 ) & 0x0F );
 8000434:	2304      	movs	r3, #4
 8000436:	73fb      	strb	r3, [r7, #15]
 8000438:	e01c      	b.n	8000474 <MCAL_GPIO_Init+0xd0>

		}else if((p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_ANALOG))
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	789b      	ldrb	r3, [r3, #2]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d102      	bne.n	8000448 <MCAL_GPIO_Init+0xa4>
		{
			/* CNFy[1:0] = 00: Analog mode */
			tempPinConfig = ( (((GPIO_MODE_INPUT_ANALOG) <<2) | 0x0 ) & 0x0F );
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
 8000446:	e015      	b.n	8000474 <MCAL_GPIO_Init+0xd0>

		}else
		{
			/* CNFy[1:0] = 10: Input with pull-up / pull-down */
			tempPinConfig = ( (((GPIO_MODE_INPUT_PULLUP) <<2) | 0x0 ) & 0x0F );
 8000448:	2308      	movs	r3, #8
 800044a:	73fb      	strb	r3, [r7, #15]

			/*For PULLUP set xODR bit 1 , PULLDOWN set xODR bit 0 */
			if(p_PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PULLDOWN)
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	789b      	ldrb	r3, [r3, #2]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d108      	bne.n	8000466 <MCAL_GPIO_Init+0xc2>
			{
				(GPIOx->ODR) &= ~(p_PinConfig->GPIO_PinNumber);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	8812      	ldrh	r2, [r2, #0]
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	e006      	b.n	8000474 <MCAL_GPIO_Init+0xd0>
			}else
			{
				(GPIOx->ODR) |= (p_PinConfig->GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	8812      	ldrh	r2, [r2, #0]
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	60da      	str	r2, [r3, #12]
			}
		}
	}

	/* Assign the CRH or CRL With Pin Configuration */
	(*CRHL) |= ( (tempPinConfig) << (GET_PIN_POSITION(p_PinConfig->GPIO_PinNumber)));
 8000474:	7bfc      	ldrb	r4, [r7, #15]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f826 	bl	80004cc <GET_PIN_POSITION>
 8000480:	4603      	mov	r3, r0
 8000482:	fa04 f203 	lsl.w	r2, r4, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	431a      	orrs	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	601a      	str	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bd90      	pop	{r4, r7, pc}

08000498 <MCAL_GPIO_WritePin>:
	return pinValue;
}


void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t a_PinNumber, PinState a_Logic)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	807b      	strh	r3, [r7, #2]
 80004a4:	4613      	mov	r3, r2
 80004a6:	707b      	strb	r3, [r7, #1]

	if(LOGIC_HIGH == a_Logic)
 80004a8:	787b      	ldrb	r3, [r7, #1]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d103      	bne.n	80004b6 <MCAL_GPIO_WritePin+0x1e>
		(GPIOx->BSRRL) = (uint32_t)a_PinNumber;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	887a      	ldrh	r2, [r7, #2]
 80004b2:	821a      	strh	r2, [r3, #16]
	else if(LOGIC_LOW == a_Logic)
		(GPIOx->BRR) = (uint32_t)a_PinNumber;
}
 80004b4:	e005      	b.n	80004c2 <MCAL_GPIO_WritePin+0x2a>
	else if(LOGIC_LOW == a_Logic)
 80004b6:	787b      	ldrb	r3, [r7, #1]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <MCAL_GPIO_WritePin+0x2a>
		(GPIOx->BRR) = (uint32_t)a_PinNumber;
 80004bc:	887a      	ldrh	r2, [r7, #2]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	615a      	str	r2, [r3, #20]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <GET_PIN_POSITION>:
/*===============================================================================
 *                        Private Function Definitions                           *
 ================================================================================*/

static uint16_t GET_PIN_POSITION(uint16_t a_PinNumber)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	switch(a_PinNumber)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	d042      	beq.n	8000562 <GET_PIN_POSITION+0x96>
 80004dc:	2b80      	cmp	r3, #128	; 0x80
 80004de:	dc11      	bgt.n	8000504 <GET_PIN_POSITION+0x38>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d036      	beq.n	8000552 <GET_PIN_POSITION+0x86>
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	dc06      	bgt.n	80004f6 <GET_PIN_POSITION+0x2a>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d02e      	beq.n	800054a <GET_PIN_POSITION+0x7e>
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d02e      	beq.n	800054e <GET_PIN_POSITION+0x82>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d028      	beq.n	8000546 <GET_PIN_POSITION+0x7a>
	case GPIO_PIN7:
	case GPIO_PIN15:
		return 28;
		break;
	default:
		break;
 80004f4:	e037      	b.n	8000566 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 80004f6:	2b20      	cmp	r3, #32
 80004f8:	d02f      	beq.n	800055a <GET_PIN_POSITION+0x8e>
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d02f      	beq.n	800055e <GET_PIN_POSITION+0x92>
 80004fe:	2b10      	cmp	r3, #16
 8000500:	d029      	beq.n	8000556 <GET_PIN_POSITION+0x8a>
		break;
 8000502:	e030      	b.n	8000566 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000508:	d023      	beq.n	8000552 <GET_PIN_POSITION+0x86>
 800050a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050e:	dc09      	bgt.n	8000524 <GET_PIN_POSITION+0x58>
 8000510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000514:	d019      	beq.n	800054a <GET_PIN_POSITION+0x7e>
 8000516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051a:	d018      	beq.n	800054e <GET_PIN_POSITION+0x82>
 800051c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000520:	d011      	beq.n	8000546 <GET_PIN_POSITION+0x7a>
		break;
 8000522:	e020      	b.n	8000566 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	d017      	beq.n	800055a <GET_PIN_POSITION+0x8e>
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	dc03      	bgt.n	8000538 <GET_PIN_POSITION+0x6c>
 8000530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000534:	d00f      	beq.n	8000556 <GET_PIN_POSITION+0x8a>
		break;
 8000536:	e016      	b.n	8000566 <GET_PIN_POSITION+0x9a>
	switch(a_PinNumber)
 8000538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800053c:	d00f      	beq.n	800055e <GET_PIN_POSITION+0x92>
 800053e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000542:	d00e      	beq.n	8000562 <GET_PIN_POSITION+0x96>
		break;
 8000544:	e00f      	b.n	8000566 <GET_PIN_POSITION+0x9a>
		return 0;
 8000546:	2300      	movs	r3, #0
 8000548:	e00e      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 4;
 800054a:	2304      	movs	r3, #4
 800054c:	e00c      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 8;
 800054e:	2308      	movs	r3, #8
 8000550:	e00a      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 12;
 8000552:	230c      	movs	r3, #12
 8000554:	e008      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 16;
 8000556:	2310      	movs	r3, #16
 8000558:	e006      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 20;
 800055a:	2314      	movs	r3, #20
 800055c:	e004      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 24;
 800055e:	2318      	movs	r3, #24
 8000560:	e002      	b.n	8000568 <GET_PIN_POSITION+0x9c>
		return 28;
 8000562:	231c      	movs	r3, #28
 8000564:	e000      	b.n	8000568 <GET_PIN_POSITION+0x9c>
	}
	return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <MCAL_RCC_initSYSClk>:

/*===============================================================================
 *                              API Definitions                                  *
 ================================================================================*/
void MCAL_RCC_initSYSClk(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	/* Clear Default Value For Control Register */
	CLEAR_BIT((RCC->CR),0);
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

	/* System Clock Switch*/
	RCC->CFGR |= SYS_CLK_SRC;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	6053      	str	r3, [r2, #4]

	/* AHB Prescaler */
	(RCC->CFGR) |= AHB_CLK_PRESCALER;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	6053      	str	r3, [r2, #4]

	/* APB1 Prescaler */
	(RCC->CFGR) |= (APB_LOW_CLK_PRESCALER<<8);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	6053      	str	r3, [r2, #4]

	/* APB2 Prescaler */
	(RCC->CFGR) |= (APB_HIGH_CLK_PRESCALER<<11);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	6053      	str	r3, [r2, #4]

#if SYS_CLK_SRC == RCC_HSI_CLK

	/* Internal High-Speed Clock Enable */
	SET_BIT((RCC->CR),0);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <MCAL_RCC_initSYSClk+0x44>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]

#error("Your SYSCLK Is False")

#endif

}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <MCAL_RCC_enableCLK>:

void MCAL_RCC_enableCLK(uint8_t a_BusID, uint8_t a_PeriphID)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
	switch (a_BusID) {
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00f      	beq.n	80005f2 <MCAL_RCC_enableCLK+0x36>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d018      	beq.n	8000608 <MCAL_RCC_enableCLK+0x4c>
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d000      	beq.n	80005dc <MCAL_RCC_enableCLK+0x20>
		break;
	case RCC_APB2_BUS:
		SET_BIT((RCC->APB2ENR),(a_PeriphID));
		break;
	default:
		break;
 80005da:	e020      	b.n	800061e <MCAL_RCC_enableCLK+0x62>
		SET_BIT((RCC->AHBENR),(a_PeriphID));
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MCAL_RCC_enableCLK+0x6c>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MCAL_RCC_enableCLK+0x6c>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	6153      	str	r3, [r2, #20]
		break;
 80005f0:	e015      	b.n	800061e <MCAL_RCC_enableCLK+0x62>
		SET_BIT((RCC->APB1ENR),(a_PeriphID));
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MCAL_RCC_enableCLK+0x6c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	79ba      	ldrb	r2, [r7, #6]
 80005f8:	2101      	movs	r1, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	4611      	mov	r1, r2
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <MCAL_RCC_enableCLK+0x6c>)
 8000602:	430b      	orrs	r3, r1
 8000604:	61d3      	str	r3, [r2, #28]
		break;
 8000606:	e00a      	b.n	800061e <MCAL_RCC_enableCLK+0x62>
		SET_BIT((RCC->APB2ENR),(a_PeriphID));
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MCAL_RCC_enableCLK+0x6c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <MCAL_RCC_enableCLK+0x6c>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6193      	str	r3, [r2, #24]
		break;
 800061c:	bf00      	nop
	}
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000

0800062c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f103 0208 	add.w	r2, r3, #8
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f103 0208 	add.w	r2, r3, #8
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f103 0208 	add.w	r2, r3, #8
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d103      	bne.n	80006a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e00c      	b.n	80006bc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3308      	adds	r3, #8
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e002      	b.n	80006b0 <vListInsert+0x2e>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d2f6      	bcs.n	80006aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	601a      	str	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	6892      	ldr	r2, [r2, #8]
 8000708:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	6852      	ldr	r2, [r2, #4]
 8000712:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	d103      	bne.n	8000726 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689a      	ldr	r2, [r3, #8]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af04      	add	r7, sp, #16
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4613      	mov	r3, r2
 8000752:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fe1f 	bl	800139c <pvPortMalloc>
 800075e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d013      	beq.n	800078e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000766:	204c      	movs	r0, #76	; 0x4c
 8000768:	f000 fe18 	bl	800139c <pvPortMalloc>
 800076c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d008      	beq.n	8000786 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000774:	224c      	movs	r2, #76	; 0x4c
 8000776:	2100      	movs	r1, #0
 8000778:	69f8      	ldr	r0, [r7, #28]
 800077a:	f001 f83b 	bl	80017f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
 8000784:	e005      	b.n	8000792 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f000 fea2 	bl	80014d0 <vPortFree>
 800078c:	e001      	b.n	8000792 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d013      	beq.n	80007c0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	2300      	movs	r3, #0
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f000 f80e 	bl	80007d0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80007b4:	69f8      	ldr	r0, [r7, #28]
 80007b6:	f000 f871 	bl	800089c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	e002      	b.n	80007c6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80007c6:	69bb      	ldr	r3, [r7, #24]
    }
 80007c8:	4618      	mov	r0, r3
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80007de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007e8:	3b01      	subs	r3, #1
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	f023 0307 	bic.w	r3, r3, #7
 80007f6:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d01e      	beq.n	800083c <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e012      	b.n	800082a <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4413      	add	r3, r2
 800080a:	7819      	ldrb	r1, [r3, #0]
 800080c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	4413      	add	r3, r2
 8000812:	3334      	adds	r3, #52	; 0x34
 8000814:	460a      	mov	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d9e9      	bls.n	8000804 <prvInitialiseNewTask+0x34>
 8000830:	e000      	b.n	8000834 <prvInitialiseNewTask+0x64>
            {
                break;
 8000832:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	2b04      	cmp	r3, #4
 8000840:	d901      	bls.n	8000846 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000842:	2304      	movs	r3, #4
 8000844:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000848:	6a3a      	ldr	r2, [r7, #32]
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
        pxNewTCB->uxBasePriority = uxPriority;
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084e:	3304      	adds	r3, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff0a 	bl	800066a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000858:	3318      	adds	r3, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff05 	bl	800066a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000864:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	f1c3 0205 	rsb	r2, r3, #5
 800086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	6938      	ldr	r0, [r7, #16]
 800087c:	f000 fc72 	bl	8001164 <pxPortInitialiseStack>
 8000880:	4602      	mov	r2, r0
 8000882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000884:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <prvInitialiseNewTask+0xc2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80008a4:	f000 fcea 	bl	800127c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80008a8:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <prvAddNewTaskToReadyList+0x108>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <prvAddNewTaskToReadyList+0x108>)
 80008b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <prvAddNewTaskToReadyList+0x10c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80008ba:	4a3b      	ldr	r2, [pc, #236]	; (80009a8 <prvAddNewTaskToReadyList+0x10c>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80008c0:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <prvAddNewTaskToReadyList+0x108>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d110      	bne.n	80008ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80008c8:	f000 fb36 	bl	8000f38 <prvInitialiseTaskLists>
 80008cc:	e00d      	b.n	80008ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <prvAddNewTaskToReadyList+0x110>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d109      	bne.n	80008ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <prvAddNewTaskToReadyList+0x10c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d802      	bhi.n	80008ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80008e4:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <prvAddNewTaskToReadyList+0x10c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <prvAddNewTaskToReadyList+0x114>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	4a2f      	ldr	r2, [pc, #188]	; (80009b0 <prvAddNewTaskToReadyList+0x114>)
 80008f2:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f8:	2201      	movs	r2, #1
 80008fa:	409a      	lsls	r2, r3
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <prvAddNewTaskToReadyList+0x118>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4313      	orrs	r3, r2
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <prvAddNewTaskToReadyList+0x118>)
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090a:	492b      	ldr	r1, [pc, #172]	; (80009b8 <prvAddNewTaskToReadyList+0x11c>)
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	3304      	adds	r3, #4
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	3204      	adds	r2, #4
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	1d1a      	adds	r2, r3, #4
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <prvAddNewTaskToReadyList+0x11c>)
 800094a:	441a      	add	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000954:	4918      	ldr	r1, [pc, #96]	; (80009b8 <prvAddNewTaskToReadyList+0x11c>)
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	440b      	add	r3, r1
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1c59      	adds	r1, r3, #1
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <prvAddNewTaskToReadyList+0x11c>)
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4403      	add	r3, r0
 8000970:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000972:	f000 fc9b 	bl	80012ac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <prvAddNewTaskToReadyList+0x110>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00e      	beq.n	800099c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <prvAddNewTaskToReadyList+0x10c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <prvAddNewTaskToReadyList+0x120>)
 800098e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	f3bf 8f4f 	dsb	sy
 8000998:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000fc 	.word	0x200000fc
 80009a8:	20000024 	.word	0x20000024
 80009ac:	20000108 	.word	0x20000108
 80009b0:	20000118 	.word	0x20000118
 80009b4:	20000104 	.word	0x20000104
 80009b8:	20000028 	.word	0x20000028
 80009bc:	e000ed04 	.word	0xe000ed04

080009c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d008      	beq.n	80009e4 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80009d2:	f000 f853 	bl	8000a7c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80009d6:	2100      	movs	r1, #0
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 fb43 	bl	8001064 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80009de:	f000 f85b 	bl	8000a98 <xTaskResumeAll>
 80009e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d107      	bne.n	80009fa <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <vTaskDelay+0x44>)
 80009ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000ed04 	.word	0xe000ed04

08000a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <vTaskStartScheduler+0x58>)
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	4912      	ldr	r1, [pc, #72]	; (8000a64 <vTaskStartScheduler+0x5c>)
 8000a1c:	4812      	ldr	r0, [pc, #72]	; (8000a68 <vTaskStartScheduler+0x60>)
 8000a1e:	f7ff fe91 	bl	8000744 <xTaskCreate>
 8000a22:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d114      	bne.n	8000a54 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000a2a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	f3bf 8f4f 	dsb	sy
 8000a3a:	603b      	str	r3, [r7, #0]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <vTaskStartScheduler+0x64>)
 8000a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a42:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <vTaskStartScheduler+0x68>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <vTaskStartScheduler+0x6c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000a50:	f000 fbf4 	bl	800123c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <vTaskStartScheduler+0x70>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000120 	.word	0x20000120
 8000a64:	0800181c 	.word	0x0800181c
 8000a68:	08000f09 	.word	0x08000f09
 8000a6c:	2000011c 	.word	0x2000011c
 8000a70:	20000108 	.word	0x20000108
 8000a74:	20000100 	.word	0x20000100
 8000a78:	20000000 	.word	0x20000000

08000a7c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <vTaskSuspendAll+0x18>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <vTaskSuspendAll+0x18>)
 8000a88:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000124 	.word	0x20000124

08000a98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000aa6:	f000 fbe9 	bl	800127c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000aaa:	4b68      	ldr	r3, [pc, #416]	; (8000c4c <xTaskResumeAll+0x1b4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	4a66      	ldr	r2, [pc, #408]	; (8000c4c <xTaskResumeAll+0x1b4>)
 8000ab2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ab4:	4b65      	ldr	r3, [pc, #404]	; (8000c4c <xTaskResumeAll+0x1b4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f040 80c0 	bne.w	8000c3e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000abe:	4b64      	ldr	r3, [pc, #400]	; (8000c50 <xTaskResumeAll+0x1b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 80bb 	beq.w	8000c3e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ac8:	e08a      	b.n	8000be0 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000aca:	4b62      	ldr	r3, [pc, #392]	; (8000c54 <xTaskResumeAll+0x1bc>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	6a12      	ldr	r2, [r2, #32]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	69d2      	ldr	r2, [r2, #28]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3318      	adds	r3, #24
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d103      	bne.n	8000b00 <xTaskResumeAll+0x68>
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	6a1a      	ldr	r2, [r3, #32]
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1e5a      	subs	r2, r3, #1
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	68d2      	ldr	r2, [r2, #12]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	6892      	ldr	r2, [r2, #8]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3304      	adds	r3, #4
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d103      	bne.n	8000b3e <xTaskResumeAll+0xa6>
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	2201      	movs	r2, #1
 8000b54:	409a      	lsls	r2, r3
 8000b56:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <xTaskResumeAll+0x1c0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	4a3e      	ldr	r2, [pc, #248]	; (8000c58 <xTaskResumeAll+0x1c0>)
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	493d      	ldr	r1, [pc, #244]	; (8000c5c <xTaskResumeAll+0x1c4>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	3304      	adds	r3, #4
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	3204      	adds	r2, #4
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	1d1a      	adds	r2, r3, #4
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4a2e      	ldr	r2, [pc, #184]	; (8000c5c <xTaskResumeAll+0x1c4>)
 8000ba4:	441a      	add	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bae:	492b      	ldr	r1, [pc, #172]	; (8000c5c <xTaskResumeAll+0x1c4>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1c59      	adds	r1, r3, #1
 8000bbe:	4827      	ldr	r0, [pc, #156]	; (8000c5c <xTaskResumeAll+0x1c4>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4403      	add	r3, r0
 8000bca:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <xTaskResumeAll+0x1c8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d302      	bcc.n	8000be0 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <xTaskResumeAll+0x1cc>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <xTaskResumeAll+0x1bc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f47f af70 	bne.w	8000aca <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000bf0:	f000 fa1e 	bl	8001030 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <xTaskResumeAll+0x1d0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d010      	beq.n	8000c22 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000c00:	f000 f836 	bl	8000c70 <xTaskIncrementTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <xTaskResumeAll+0x1cc>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f1      	bne.n	8000c00 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <xTaskResumeAll+0x1d0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <xTaskResumeAll+0x1cc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d009      	beq.n	8000c3e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <xTaskResumeAll+0x1d4>)
 8000c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	f3bf 8f4f 	dsb	sy
 8000c3a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000c3e:	f000 fb35 	bl	80012ac <vPortExitCritical>

    return xAlreadyYielded;
 8000c42:	693b      	ldr	r3, [r7, #16]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000124 	.word	0x20000124
 8000c50:	200000fc 	.word	0x200000fc
 8000c54:	200000bc 	.word	0x200000bc
 8000c58:	20000104 	.word	0x20000104
 8000c5c:	20000028 	.word	0x20000028
 8000c60:	20000024 	.word	0x20000024
 8000c64:	20000110 	.word	0x20000110
 8000c68:	2000010c 	.word	0x2000010c
 8000c6c:	e000ed04 	.word	0xe000ed04

08000c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c7a:	4b75      	ldr	r3, [pc, #468]	; (8000e50 <xTaskIncrementTick+0x1e0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 80dc 	bne.w	8000e3c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c84:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <xTaskIncrementTick+0x1e4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000c8c:	4a71      	ldr	r2, [pc, #452]	; (8000e54 <xTaskIncrementTick+0x1e4>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d110      	bne.n	8000cba <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000c98:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <xTaskIncrementTick+0x1e8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b6f      	ldr	r3, [pc, #444]	; (8000e5c <xTaskIncrementTick+0x1ec>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6d      	ldr	r2, [pc, #436]	; (8000e58 <xTaskIncrementTick+0x1e8>)
 8000ca4:	6013      	str	r3, [r2, #0]
 8000ca6:	4a6d      	ldr	r2, [pc, #436]	; (8000e5c <xTaskIncrementTick+0x1ec>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <xTaskIncrementTick+0x1f0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4a6b      	ldr	r2, [pc, #428]	; (8000e60 <xTaskIncrementTick+0x1f0>)
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	f000 f9bb 	bl	8001030 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000cba:	4b6a      	ldr	r3, [pc, #424]	; (8000e64 <xTaskIncrementTick+0x1f4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f0c0 80a6 	bcc.w	8000e12 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cc6:	4b64      	ldr	r3, [pc, #400]	; (8000e58 <xTaskIncrementTick+0x1e8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d104      	bne.n	8000cda <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000cd0:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <xTaskIncrementTick+0x1f4>)
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd6:	601a      	str	r2, [r3, #0]
                    break;
 8000cd8:	e09b      	b.n	8000e12 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cda:	4b5f      	ldr	r3, [pc, #380]	; (8000e58 <xTaskIncrementTick+0x1e8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d203      	bcs.n	8000cfa <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	; (8000e64 <xTaskIncrementTick+0x1f4>)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000cf8:	e08b      	b.n	8000e12 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68d2      	ldr	r2, [r2, #12]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	6892      	ldr	r2, [r2, #8]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d103      	bne.n	8000d28 <xTaskIncrementTick+0xb8>
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01e      	beq.n	8000d7e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	6a12      	ldr	r2, [r2, #32]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	69d2      	ldr	r2, [r2, #28]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	3318      	adds	r3, #24
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d103      	bne.n	8000d6e <xTaskIncrementTick+0xfe>
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	6a1a      	ldr	r2, [r3, #32]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1e5a      	subs	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	2201      	movs	r2, #1
 8000d84:	409a      	lsls	r2, r3
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <xTaskIncrementTick+0x1f8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <xTaskIncrementTick+0x1f8>)
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d94:	4935      	ldr	r1, [pc, #212]	; (8000e6c <xTaskIncrementTick+0x1fc>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	3304      	adds	r3, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	3204      	adds	r2, #4
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1d1a      	adds	r2, r3, #4
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <xTaskIncrementTick+0x1fc>)
 8000dd4:	441a      	add	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dde:	4923      	ldr	r1, [pc, #140]	; (8000e6c <xTaskIncrementTick+0x1fc>)
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	1c59      	adds	r1, r3, #1
 8000dee:	481f      	ldr	r0, [pc, #124]	; (8000e6c <xTaskIncrementTick+0x1fc>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4403      	add	r3, r0
 8000dfa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <xTaskIncrementTick+0x200>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	429a      	cmp	r2, r3
 8000e08:	f67f af5d 	bls.w	8000cc6 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e10:	e759      	b.n	8000cc6 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <xTaskIncrementTick+0x200>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	4914      	ldr	r1, [pc, #80]	; (8000e6c <xTaskIncrementTick+0x1fc>)
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d901      	bls.n	8000e2e <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <xTaskIncrementTick+0x204>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e004      	b.n	8000e46 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <xTaskIncrementTick+0x208>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <xTaskIncrementTick+0x208>)
 8000e44:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000e46:	69fb      	ldr	r3, [r7, #28]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000124 	.word	0x20000124
 8000e54:	20000100 	.word	0x20000100
 8000e58:	200000b4 	.word	0x200000b4
 8000e5c:	200000b8 	.word	0x200000b8
 8000e60:	20000114 	.word	0x20000114
 8000e64:	2000011c 	.word	0x2000011c
 8000e68:	20000104 	.word	0x20000104
 8000e6c:	20000028 	.word	0x20000028
 8000e70:	20000024 	.word	0x20000024
 8000e74:	20000110 	.word	0x20000110
 8000e78:	2000010c 	.word	0x2000010c

08000e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <vTaskSwitchContext+0x78>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <vTaskSwitchContext+0x7c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000e90:	e02a      	b.n	8000ee8 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <vTaskSwitchContext+0x7c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <vTaskSwitchContext+0x80>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	fab3 f383 	clz	r3, r3
 8000ea4:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	f1c3 031f 	rsb	r3, r3, #31
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <vTaskSwitchContext+0x84>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d104      	bne.n	8000ede <vTaskSwitchContext+0x62>
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <vTaskSwitchContext+0x88>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000124 	.word	0x20000124
 8000ef8:	20000110 	.word	0x20000110
 8000efc:	20000104 	.word	0x20000104
 8000f00:	20000028 	.word	0x20000028
 8000f04:	20000024 	.word	0x20000024

08000f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f10:	f000 f852 	bl	8000fb8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <prvIdleTask+0x28>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d9f9      	bls.n	8000f10 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <prvIdleTask+0x2c>)
 8000f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f2c:	e7f0      	b.n	8000f10 <prvIdleTask+0x8>
 8000f2e:	bf00      	nop
 8000f30:	20000028 	.word	0x20000028
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	e00c      	b.n	8000f5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <prvInitialiseTaskLists+0x60>)
 8000f50:	4413      	add	r3, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fb6a 	bl	800062c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d9ef      	bls.n	8000f44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <prvInitialiseTaskLists+0x64>)
 8000f66:	f7ff fb61 	bl	800062c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <prvInitialiseTaskLists+0x68>)
 8000f6c:	f7ff fb5e 	bl	800062c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <prvInitialiseTaskLists+0x6c>)
 8000f72:	f7ff fb5b 	bl	800062c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <prvInitialiseTaskLists+0x70>)
 8000f78:	f7ff fb58 	bl	800062c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <prvInitialiseTaskLists+0x74>)
 8000f7e:	f7ff fb55 	bl	800062c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <prvInitialiseTaskLists+0x78>)
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <prvInitialiseTaskLists+0x64>)
 8000f86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <prvInitialiseTaskLists+0x7c>)
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <prvInitialiseTaskLists+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	2000008c 	.word	0x2000008c
 8000fa0:	200000a0 	.word	0x200000a0
 8000fa4:	200000bc 	.word	0x200000bc
 8000fa8:	200000d0 	.word	0x200000d0
 8000fac:	200000e8 	.word	0x200000e8
 8000fb0:	200000b4 	.word	0x200000b4
 8000fb4:	200000b8 	.word	0x200000b8

08000fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fbe:	e019      	b.n	8000ff4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000fc0:	f000 f95c 	bl	800127c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <prvCheckTasksWaitingTermination+0x4c>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb8e 	bl	80006f2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <prvCheckTasksWaitingTermination+0x50>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <prvCheckTasksWaitingTermination+0x50>)
 8000fde:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <prvCheckTasksWaitingTermination+0x54>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <prvCheckTasksWaitingTermination+0x54>)
 8000fe8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000fea:	f000 f95f 	bl	80012ac <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f80e 	bl	8001010 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <prvCheckTasksWaitingTermination+0x54>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e1      	bne.n	8000fc0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000d0 	.word	0x200000d0
 8001008:	200000fc 	.word	0x200000fc
 800100c:	200000e4 	.word	0x200000e4

08001010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fa57 	bl	80014d0 <vPortFree>
            vPortFree( pxTCB );
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fa54 	bl	80014d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <prvResetNextTaskUnblockTime+0x2c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d104      	bne.n	8001048 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <prvResetNextTaskUnblockTime+0x30>)
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001046:	e005      	b.n	8001054 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <prvResetNextTaskUnblockTime+0x2c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <prvResetNextTaskUnblockTime+0x30>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	200000b4 	.word	0x200000b4
 8001060:	2000011c 	.word	0x2000011c

08001064 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001074:	4b35      	ldr	r3, [pc, #212]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3304      	adds	r3, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fb39 	bl	80006f2 <uxListRemove>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10b      	bne.n	800109e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2201      	movs	r2, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <prvAddCurrentTaskToDelayedList+0xec>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4013      	ands	r3, r2
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <prvAddCurrentTaskToDelayedList+0xec>)
 800109c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d124      	bne.n	80010f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d021      	beq.n	80010f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <prvAddCurrentTaskToDelayedList+0xf0>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	6892      	ldr	r2, [r2, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	3204      	adds	r2, #4
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1d1a      	adds	r2, r3, #4
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <prvAddCurrentTaskToDelayedList+0xf0>)
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <prvAddCurrentTaskToDelayedList+0xf0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <prvAddCurrentTaskToDelayedList+0xf0>)
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80010ee:	e026      	b.n	800113e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	d209      	bcs.n	800111c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <prvAddCurrentTaskToDelayedList+0xf4>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f7ff fab4 	bl	8000682 <vListInsert>
}
 800111a:	e010      	b.n	800113e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <prvAddCurrentTaskToDelayedList+0xf8>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3304      	adds	r3, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f7ff faaa 	bl	8000682 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d202      	bcs.n	800113e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <prvAddCurrentTaskToDelayedList+0xfc>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6013      	str	r3, [r2, #0]
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000100 	.word	0x20000100
 800114c:	20000024 	.word	0x20000024
 8001150:	20000104 	.word	0x20000104
 8001154:	200000e8 	.word	0x200000e8
 8001158:	200000b8 	.word	0x200000b8
 800115c:	200000b4 	.word	0x200000b4
 8001160:	2000011c 	.word	0x2000011c

08001164 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3b04      	subs	r3, #4
 8001174:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800117c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3b04      	subs	r3, #4
 8001182:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f023 0201 	bic.w	r2, r3, #1
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3b04      	subs	r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001194:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <pxPortInitialiseStack+0x54>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3b14      	subs	r3, #20
 800119e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3b20      	subs	r3, #32
 80011aa:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	080011bd 	.word	0x080011bd

080011bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80011c6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80011d8:	bf00      	nop
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0fc      	beq.n	80011da <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	0000      	movs	r0, r0
 80011ec:	0000      	movs	r0, r0
	...

080011f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <pxCurrentTCBConst2>)
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	6808      	ldr	r0, [r1, #0]
 80011f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011fa:	f380 8809 	msr	PSP, r0
 80011fe:	f3bf 8f6f 	isb	sy
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	f380 8811 	msr	BASEPRI, r0
 800120a:	f04e 0e0d 	orr.w	lr, lr, #13
 800120e:	4770      	bx	lr

08001210 <pxCurrentTCBConst2>:
 8001210:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop

08001218 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <prvPortStartFirstTask+0x1c>)
 800121a:	6800      	ldr	r0, [r0, #0]
 800121c:	6800      	ldr	r0, [r0, #0]
 800121e:	f380 8808 	msr	MSP, r0
 8001222:	b662      	cpsie	i
 8001224:	b661      	cpsie	f
 8001226:	f3bf 8f4f 	dsb	sy
 800122a:	f3bf 8f6f 	isb	sy
 800122e:	df00      	svc	0
 8001230:	bf00      	nop
 8001232:	0000      	.short	0x0000
 8001234:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop

0800123c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <xPortStartScheduler+0x38>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <xPortStartScheduler+0x38>)
 8001246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800124a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <xPortStartScheduler+0x38>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <xPortStartScheduler+0x38>)
 8001252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001256:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001258:	f000 f886 	bl	8001368 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <xPortStartScheduler+0x3c>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001262:	f7ff ffd9 	bl	8001218 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001266:	f7ff fe09 	bl	8000e7c <vTaskSwitchContext>
    prvTaskExitError();
 800126a:	f7ff ffa7 	bl	80011bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	e000ed20 	.word	0xe000ed20
 8001278:	20000004 	.word	0x20000004

0800127c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001286:	f383 8811 	msr	BASEPRI, r3
 800128a:	f3bf 8f6f 	isb	sy
 800128e:	f3bf 8f4f 	dsb	sy
 8001292:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <vPortEnterCritical+0x2c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <vPortEnterCritical+0x2c>)
 800129c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000004 	.word	0x20000004

080012ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <vPortExitCritical+0x2c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <vPortExitCritical+0x2c>)
 80012ba:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <vPortExitCritical+0x2c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d104      	bne.n	80012ce <vPortExitCritical+0x22>
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000004 	.word	0x20000004
 80012dc:	00000000 	.word	0x00000000

080012e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80012e0:	f3ef 8009 	mrs	r0, PSP
 80012e4:	f3bf 8f6f 	isb	sy
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <pxCurrentTCBConst>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012f0:	6010      	str	r0, [r2, #0]
 80012f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80012f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80012fa:	f380 8811 	msr	BASEPRI, r0
 80012fe:	f7ff fdbd 	bl	8000e7c <vTaskSwitchContext>
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	f380 8811 	msr	BASEPRI, r0
 800130a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	6808      	ldr	r0, [r1, #0]
 8001312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001316:	f380 8809 	msr	PSP, r0
 800131a:	f3bf 8f6f 	isb	sy
 800131e:	4770      	bx	lr

08001320 <pxCurrentTCBConst>:
 8001320:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop

08001328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
        __asm volatile
 800132e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001332:	f383 8811 	msr	BASEPRI, r3
 8001336:	f3bf 8f6f 	isb	sy
 800133a:	f3bf 8f4f 	dsb	sy
 800133e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001340:	f7ff fc96 	bl	8000c70 <xTaskIncrementTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SysTick_Handler+0x3c>)
 800134c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	e000ed04 	.word	0xe000ed04

08001368 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <vPortSetupTimerInterrupt+0x28>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <vPortSetupTimerInterrupt+0x2c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <vPortSetupTimerInterrupt+0x30>)
 800137a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800137e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <vPortSetupTimerInterrupt+0x28>)
 8001382:	2207      	movs	r2, #7
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010
 8001394:	e000e018 	.word	0xe000e018
 8001398:	e000e014 	.word	0xe000e014

0800139c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80013a8:	f7ff fb68 	bl	8000a7c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <pvPortMalloc+0x120>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80013b4:	f000 f8ca 	bl	800154c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d012      	beq.n	80013e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80013be:	2208      	movs	r2, #8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	3308      	adds	r3, #8
 80013ca:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d804      	bhi.n	80013e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4413      	add	r3, r2
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e001      	b.n	80013e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db60      	blt.n	80014ac <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d05d      	beq.n	80014ac <pvPortMalloc+0x110>
 80013f0:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <pvPortMalloc+0x124>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d858      	bhi.n	80014ac <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <pvPortMalloc+0x128>)
 80013fc:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <pvPortMalloc+0x128>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001404:	e004      	b.n	8001410 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d903      	bls.n	8001422 <pvPortMalloc+0x86>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f1      	bne.n	8001406 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <pvPortMalloc+0x120>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	d03f      	beq.n	80014ac <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2208      	movs	r2, #8
 8001432:	4413      	add	r3, r2
 8001434:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	1ad2      	subs	r2, r2, r3
 8001446:	2308      	movs	r3, #8
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	429a      	cmp	r2, r3
 800144c:	d90f      	bls.n	800146e <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	1ad2      	subs	r2, r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f8cb 	bl	8001604 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <pvPortMalloc+0x124>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <pvPortMalloc+0x124>)
 800147a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <pvPortMalloc+0x124>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <pvPortMalloc+0x12c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d203      	bcs.n	8001490 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <pvPortMalloc+0x124>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <pvPortMalloc+0x12c>)
 800148e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <pvPortMalloc+0x130>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a08      	ldr	r2, [pc, #32]	; (80014cc <pvPortMalloc+0x130>)
 80014aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80014ac:	f7ff faf4 	bl	8000a98 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80014b0:	697b      	ldr	r3, [r7, #20]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20002130 	.word	0x20002130
 80014c0:	20002134 	.word	0x20002134
 80014c4:	20002128 	.word	0x20002128
 80014c8:	20002138 	.word	0x20002138
 80014cc:	2000213c 	.word	0x2000213c

080014d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d02b      	beq.n	800153a <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80014e2:	2308      	movs	r3, #8
 80014e4:	425b      	negs	r3, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0fdb      	lsrs	r3, r3, #31
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01c      	beq.n	800153a <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d118      	bne.n	800153a <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001514:	f7ff fab2 	bl	8000a7c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <vPortFree+0x74>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <vPortFree+0x74>)
 8001524:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	f000 f86c 	bl	8001604 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <vPortFree+0x78>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <vPortFree+0x78>)
 8001534:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001536:	f7ff faaf 	bl	8000a98 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20002134 	.word	0x20002134
 8001548:	20002140 	.word	0x20002140

0800154c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <prvHeapInit+0xa4>)
 800155a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3307      	adds	r3, #7
 800156a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f023 0307 	bic.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <prvHeapInit+0xa4>)
 800157c:	4413      	add	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <prvHeapInit+0xa8>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <prvHeapInit+0xa8>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001598:	2208      	movs	r2, #8
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f023 0307 	bic.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <prvHeapInit+0xac>)
 80015ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <prvHeapInit+0xac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <prvHeapInit+0xac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <prvHeapInit+0xac>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a08      	ldr	r2, [pc, #32]	; (80015fc <prvHeapInit+0xb0>)
 80015da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <prvHeapInit+0xb4>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000128 	.word	0x20000128
 80015f4:	20002128 	.word	0x20002128
 80015f8:	20002130 	.word	0x20002130
 80015fc:	20002138 	.word	0x20002138
 8001600:	20002134 	.word	0x20002134

08001604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <prvInsertBlockIntoFreeList+0xa8>)
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	e002      	b.n	8001618 <prvInsertBlockIntoFreeList+0x14>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d8f7      	bhi.n	8001612 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d108      	bne.n	8001646 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	441a      	add	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	441a      	add	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d118      	bne.n	800168c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <prvInsertBlockIntoFreeList+0xac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d00d      	beq.n	8001682 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	441a      	add	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e008      	b.n	8001694 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <prvInsertBlockIntoFreeList+0xac>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e003      	b.n	8001694 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d002      	beq.n	80016a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	20002128 	.word	0x20002128
 80016b0:	20002130 	.word	0x20002130

080016b4 <systemInit>:
//	uint32_t currentCounter = g_TickCounter;
//	while((g_TickCounter - currentCounter) < delay);
//}

void systemInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	//	SysTick_Config((uint32_t)8000);/* For The Delay Function */

	MCAL_RCC_initSYSClk();
 80016ba:	f7fe ff5b 	bl	8000574 <MCAL_RCC_initSYSClk>

	MCAL_RCC_enableCLK(RCC_APB2_BUS, RCC_GPIOB_ID);
 80016be:	2103      	movs	r1, #3
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7fe ff7b 	bl	80005bc <MCAL_RCC_enableCLK>

	GPIO_PinConfig_t config;

	config.GPIO_Mode = GPIO_MODE_OUTPUT_PUSHPULL;
 80016c6:	2304      	movs	r3, #4
 80016c8:	71bb      	strb	r3, [r7, #6]
	config.GPIO_PinNumber = GPIO_PIN12;
 80016ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ce:	80bb      	strh	r3, [r7, #4]
	config.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10M;
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &config);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <systemInit+0x34>)
 80016da:	f7fe fe63 	bl	80003a4 <MCAL_GPIO_Init>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40010c00 	.word	0x40010c00

080016ec <vBlinkLed>:


void vBlinkLed(void *param)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN12, LOGIC_HIGH);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <vBlinkLed+0x34>)
 80016fc:	f7fe fecc 	bl	8000498 <MCAL_GPIO_WritePin>
		vTaskDelay(500);
 8001700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001704:	f7ff f95c 	bl	80009c0 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN12, LOGIC_LOW);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <vBlinkLed+0x34>)
 8001710:	f7fe fec2 	bl	8000498 <MCAL_GPIO_WritePin>
		vTaskDelay(500);
 8001714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001718:	f7ff f952 	bl	80009c0 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN12, LOGIC_HIGH);
 800171c:	e7ea      	b.n	80016f4 <vBlinkLed+0x8>
 800171e:	bf00      	nop
 8001720:	40010c00 	.word	0x40010c00

08001724 <main>:
	}
}

int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af02      	add	r7, sp, #8
	systemInit();
 800172a:	f7ff ffc3 	bl	80016b4 <systemInit>

	xTaskCreate(vBlinkLed, "BlinkLed", 128, NULL, 1, vBlinkLedHandle);
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <main+0x28>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	2301      	movs	r3, #1
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	4904      	ldr	r1, [pc, #16]	; (8001750 <main+0x2c>)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <main+0x30>)
 8001740:	f7ff f800 	bl	8000744 <xTaskCreate>

	vTaskStartScheduler();
 8001744:	f7ff f960 	bl	8000a08 <vTaskStartScheduler>

	/* Loop forever */
	while(1);
 8001748:	e7fe      	b.n	8001748 <main+0x24>
 800174a:	bf00      	nop
 800174c:	20002144 	.word	0x20002144
 8001750:	08001824 	.word	0x08001824
 8001754:	080016ed 	.word	0x080016ed

08001758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800175c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001786:	f000 f811 	bl	80017ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7ff ffcb 	bl	8001724 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   r0, =_estack
 8001790:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800179c:	08001838 	.word	0x08001838
  ldr r2, =_sbss
 80017a0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80017a4:	20002184 	.word	0x20002184

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <__libc_init_array>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	2500      	movs	r5, #0
 80017b0:	4e0c      	ldr	r6, [pc, #48]	; (80017e4 <__libc_init_array+0x38>)
 80017b2:	4c0d      	ldr	r4, [pc, #52]	; (80017e8 <__libc_init_array+0x3c>)
 80017b4:	1ba4      	subs	r4, r4, r6
 80017b6:	10a4      	asrs	r4, r4, #2
 80017b8:	42a5      	cmp	r5, r4
 80017ba:	d109      	bne.n	80017d0 <__libc_init_array+0x24>
 80017bc:	f000 f822 	bl	8001804 <_init>
 80017c0:	2500      	movs	r5, #0
 80017c2:	4e0a      	ldr	r6, [pc, #40]	; (80017ec <__libc_init_array+0x40>)
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <__libc_init_array+0x44>)
 80017c6:	1ba4      	subs	r4, r4, r6
 80017c8:	10a4      	asrs	r4, r4, #2
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d105      	bne.n	80017da <__libc_init_array+0x2e>
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
 80017d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017d4:	4798      	blx	r3
 80017d6:	3501      	adds	r5, #1
 80017d8:	e7ee      	b.n	80017b8 <__libc_init_array+0xc>
 80017da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017de:	4798      	blx	r3
 80017e0:	3501      	adds	r5, #1
 80017e2:	e7f2      	b.n	80017ca <__libc_init_array+0x1e>
 80017e4:	08001830 	.word	0x08001830
 80017e8:	08001830 	.word	0x08001830
 80017ec:	08001830 	.word	0x08001830
 80017f0:	08001834 	.word	0x08001834

080017f4 <memset>:
 80017f4:	4603      	mov	r3, r0
 80017f6:	4402      	add	r2, r0
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d100      	bne.n	80017fe <memset+0xa>
 80017fc:	4770      	bx	lr
 80017fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001802:	e7f9      	b.n	80017f8 <memset+0x4>

08001804 <_init>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	bf00      	nop
 8001808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180a:	bc08      	pop	{r3}
 800180c:	469e      	mov	lr, r3
 800180e:	4770      	bx	lr

08001810 <_fini>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr
